"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@assistant-ui+react-langgraph@0.0.5_@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types_d6v6uofawafisl2fztrj5uyd4m";
exports.ids = ["vendor-chunks/@assistant-ui+react-langgraph@0.0.5_@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types_d6v6uofawafisl2fztrj5uyd4m"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@assistant-ui+react-langgraph@0.0.5_@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types_d6v6uofawafisl2fztrj5uyd4m/node_modules/@assistant-ui/react-langgraph/dist/index.mjs":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@assistant-ui+react-langgraph@0.0.5_@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types_d6v6uofawafisl2fztrj5uyd4m/node_modules/@assistant-ui/react-langgraph/dist/index.mjs ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertLangchainMessages: () => (/* binding */ convertLangchainMessages),\n/* harmony export */   useLangGraphMessages: () => (/* binding */ useLangGraphMessages),\n/* harmony export */   useLangGraphRuntime: () => (/* binding */ useLangGraphRuntime)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@14.2.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _assistant_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @assistant-ui/react */ \"(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/index.mjs\");\n// src/useLangGraphRuntime.ts\n\n\n\n// src/convertLangchainMessages.ts\nvar convertLangchainMessages = (message) => {\n  switch (message.type) {\n    case \"system\":\n      return {\n        role: \"system\",\n        id: message.id,\n        content: [{ type: \"text\", text: message.content }]\n      };\n    case \"human\":\n      return {\n        role: \"user\",\n        id: message.id,\n        content: [{ type: \"text\", text: message.content }]\n      };\n    case \"ai\":\n      return {\n        role: \"assistant\",\n        id: message.id,\n        content: [\n          {\n            type: \"text\",\n            text: message.content\n          },\n          ...message.tool_calls?.map(\n            (chunk) => ({\n              type: \"tool-call\",\n              toolCallId: chunk.id,\n              toolName: chunk.name,\n              args: chunk.args,\n              argsText: message.tool_call_chunks?.find((c) => c.id === chunk.id)?.args ?? JSON.stringify(chunk.args)\n            })\n          ) ?? []\n        ]\n      };\n    case \"tool\":\n      return {\n        role: \"tool\",\n        toolName: message.name,\n        toolCallId: message.tool_call_id,\n        result: message.content\n      };\n  }\n};\n\n// src/useLangGraphMessages.ts\n\nvar useLangGraphMessages = ({\n  stream\n}) => {\n  const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (messages2) => {\n      if (messages2.length > 0) {\n        setMessages((currentMessages) => [...currentMessages, ...messages2]);\n      }\n      const response = await stream(messages2);\n      const completeMessages = [];\n      let partialMessages = /* @__PURE__ */ new Map();\n      for await (const chunk of response) {\n        if (chunk.event === \"messages/partial\") {\n          for (const message of chunk.data) {\n            if (!message.id) throw new Error(\"Partial message missing id\");\n            partialMessages.set(message.id, message);\n          }\n        } else if (chunk.event === \"messages/complete\") {\n          for (const message of chunk.data) {\n            if (!message.id) continue;\n            partialMessages.delete(message.id);\n          }\n          completeMessages.push(...chunk.data);\n        } else {\n          continue;\n        }\n        setMessages([...completeMessages, ...partialMessages.values()]);\n      }\n      if (partialMessages.size > 0) {\n        throw new Error(\"A partial message was not marked as complete\");\n      }\n    },\n    [stream]\n  );\n  return { messages, sendMessage };\n};\n\n// src/useLangGraphRuntime.ts\nvar getPendingToolCalls = (messages) => {\n  const pendingToolCalls = /* @__PURE__ */ new Map();\n  for (const message of messages) {\n    if (message.type === \"ai\") {\n      for (const toolCall of message.tool_calls ?? []) {\n        pendingToolCalls.set(toolCall.id, toolCall);\n      }\n    }\n    if (message.type === \"tool\") {\n      pendingToolCalls.delete(message.tool_call_id);\n    }\n  }\n  return [...pendingToolCalls.values()];\n};\nvar useLangGraphRuntime = ({\n  threadId,\n  stream\n}) => {\n  const { messages, sendMessage } = useLangGraphMessages({\n    stream\n  });\n  const [isRunning, setIsRunning] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const handleSendMessage = async (messages2) => {\n    try {\n      setIsRunning(true);\n      await sendMessage(messages2);\n    } catch (error) {\n      console.error(\"Error streaming messages:\", error);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n  const threadMessages = (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_1__.useExternalMessageConverter)({\n    callback: convertLangchainMessages,\n    messages,\n    isRunning\n  });\n  return (0,_assistant_ui_react__WEBPACK_IMPORTED_MODULE_1__.useExternalStoreRuntime)({\n    threadId,\n    isRunning,\n    messages: threadMessages,\n    onNew: (msg) => {\n      if (msg.content.length !== 1 || msg.content[0]?.type !== \"text\")\n        throw new Error(\"Only text messages are supported\");\n      const cancellations = getPendingToolCalls(messages).map(\n        (t) => ({\n          type: \"tool\",\n          name: t.name,\n          tool_call_id: t.id,\n          content: JSON.stringify({ cancelled: true })\n        })\n      );\n      return handleSendMessage([\n        ...cancellations,\n        {\n          type: \"human\",\n          content: msg.content[0].text\n        }\n      ]);\n    },\n    onAddToolResult: async ({ toolCallId, toolName, result }) => {\n      await handleSendMessage([\n        {\n          type: \"tool\",\n          name: toolName,\n          tool_call_id: toolCallId,\n          content: JSON.stringify(result)\n        }\n      ]);\n    }\n  });\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@assistant-ui+react-langgraph@0.0.5_@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types_d6v6uofawafisl2fztrj5uyd4m/node_modules/@assistant-ui/react-langgraph/dist/index.mjs\n");

/***/ })

};
;