"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle";
exports.ids = ["vendor-chunks/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-BJPOCE4O.mjs":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-BJPOCE4O.mjs ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __export: () => (/* binding */ __export)
/* harmony export */ });
/* __next_internal_client_entry_do_not_use__ __export auto */ var __defProp = Object.defineProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
 //# sourceMappingURL=chunk-BJPOCE4O.mjs.map


/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-ZQNZLTZL.mjs":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-ZQNZLTZL.mjs ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipeableTransformStream: () => (/* binding */ PipeableTransformStream),\n/* harmony export */   createEdgeRuntimeAPI: () => (/* binding */ createEdgeRuntimeAPI),\n/* harmony export */   getEdgeRuntimeResponse: () => (/* binding */ getEdgeRuntimeResponse),\n/* harmony export */   getEdgeRuntimeStream: () => (/* binding */ getEdgeRuntimeStream),\n/* harmony export */   mergeModelConfigs: () => (/* binding */ mergeModelConfigs),\n/* harmony export */   runResultStream: () => (/* binding */ runResultStream),\n/* harmony export */   streamPartEncoderStream: () => (/* binding */ streamPartEncoderStream),\n/* harmony export */   toCoreMessage: () => (/* binding */ toCoreMessage),\n/* harmony export */   toCoreMessages: () => (/* binding */ toCoreMessages),\n/* harmony export */   toLanguageModelMessages: () => (/* binding */ toLanguageModelMessages),\n/* harmony export */   toLanguageModelTools: () => (/* binding */ toLanguageModelTools),\n/* harmony export */   toolResultStream: () => (/* binding */ toolResultStream)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(ssr)/../node_modules/.pnpm/zod@3.23.8/node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/../node_modules/.pnpm/zod-to-json-schema@3.23.3_zod@3.23.8/node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var secure_json_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! secure-json-parse */ \"(ssr)/../node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js\");\n/* __next_internal_client_entry_do_not_use__ mergeModelConfigs,toLanguageModelMessages,toCoreMessages,toCoreMessage,toLanguageModelTools,PipeableTransformStream,streamPartEncoderStream,runResultStream,toolResultStream,getEdgeRuntimeStream,getEdgeRuntimeResponse,createEdgeRuntimeAPI auto */ // src/runtimes/edge/converters/toLanguageModelMessages.ts\nvar assistantMessageSplitter = ()=>{\n    const stash = [];\n    let assistantMessage = {\n        role: \"assistant\",\n        content: []\n    };\n    let toolMessage = {\n        role: \"tool\",\n        content: []\n    };\n    return {\n        addTextContentPart: (part)=>{\n            if (toolMessage.content.length > 0) {\n                stash.push(assistantMessage);\n                stash.push(toolMessage);\n                assistantMessage = {\n                    role: \"assistant\",\n                    content: []\n                };\n                toolMessage = {\n                    role: \"tool\",\n                    content: []\n                };\n            }\n            assistantMessage.content.push(part);\n        },\n        addToolCallPart: (part)=>{\n            assistantMessage.content.push({\n                type: \"tool-call\",\n                toolCallId: part.toolCallId,\n                toolName: part.toolName,\n                args: part.args\n            });\n            toolMessage.content.push({\n                type: \"tool-result\",\n                toolCallId: part.toolCallId,\n                toolName: part.toolName,\n                result: part.result ?? \"<no result>\",\n                isError: part.isError ?? false\n            });\n        },\n        getMessages: ()=>{\n            if (toolMessage.content.length > 0) {\n                return [\n                    ...stash,\n                    assistantMessage,\n                    toolMessage\n                ];\n            }\n            return [\n                ...stash,\n                assistantMessage\n            ];\n        }\n    };\n};\nfunction toLanguageModelMessages(message) {\n    return message.flatMap((message2)=>{\n        const role = message2.role;\n        switch(role){\n            case \"system\":\n                {\n                    return [\n                        {\n                            role: \"system\",\n                            content: message2.content[0].text\n                        }\n                    ];\n                }\n            case \"user\":\n                {\n                    const msg = {\n                        role: \"user\",\n                        content: message2.content.map((part)=>{\n                            const type = part.type;\n                            switch(type){\n                                case \"text\":\n                                    {\n                                        return part;\n                                    }\n                                case \"image\":\n                                    {\n                                        return {\n                                            type: \"image\",\n                                            image: new URL(part.image)\n                                        };\n                                    }\n                                default:\n                                    {\n                                        const unhandledType = type;\n                                        throw new Error(`Unspported content part type: ${unhandledType}`);\n                                    }\n                            }\n                        })\n                    };\n                    return [\n                        msg\n                    ];\n                }\n            case \"assistant\":\n                {\n                    const splitter = assistantMessageSplitter();\n                    for (const part of message2.content){\n                        const type = part.type;\n                        switch(type){\n                            case \"text\":\n                                {\n                                    splitter.addTextContentPart(part);\n                                    break;\n                                }\n                            case \"tool-call\":\n                                {\n                                    splitter.addToolCallPart(part);\n                                    break;\n                                }\n                            default:\n                                {\n                                    const unhandledType = type;\n                                    throw new Error(`Unhandled content part type: ${unhandledType}`);\n                                }\n                        }\n                    }\n                    return splitter.getMessages();\n                }\n            default:\n                {\n                    const unhandledRole = role;\n                    throw new Error(`Unknown message role: ${unhandledRole}`);\n                }\n        }\n    });\n}\n// src/runtimes/edge/converters/toCoreMessages.ts\nvar toCoreMessages = (message)=>{\n    return message.map(toCoreMessage);\n};\nvar toCoreMessage = (message)=>{\n    const role = message.role;\n    switch(role){\n        case \"assistant\":\n            return {\n                role,\n                content: message.content.map((part)=>{\n                    if (part.type === \"ui\") throw new Error(\"UI parts are not supported\");\n                    if (part.type === \"tool-call\") {\n                        const { argsText, ...rest } = part;\n                        return rest;\n                    }\n                    return part;\n                })\n            };\n        case \"user\":\n            return {\n                role,\n                content: [\n                    ...message.content.map((part)=>{\n                        if (part.type === \"ui\") throw new Error(\"UI parts are not supported\");\n                        return part;\n                    }),\n                    ...message.attachments.map((a)=>a.content).flat()\n                ]\n            };\n        case \"system\":\n            return {\n                role,\n                content: message.content\n            };\n        default:\n            {\n                const unsupportedRole = role;\n                throw new Error(`Unknown message role: ${unsupportedRole}`);\n            }\n    }\n};\n// src/runtimes/edge/converters/toLanguageModelTools.ts\n\n\nvar toLanguageModelTools = (tools)=>{\n    return Object.entries(tools).map(([name, tool])=>({\n            type: \"function\",\n            name,\n            ...tool.description ? {\n                description: tool.description\n            } : void 0,\n            parameters: tool.parameters instanceof zod__WEBPACK_IMPORTED_MODULE_1__.z.ZodType ? (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(tool.parameters) : tool.parameters\n        }));\n};\n// src/runtimes/edge/streams/assistantEncoderStream.ts\nfunction assistantEncoderStream() {\n    const toolCalls = /* @__PURE__ */ new Set();\n    return new TransformStream({\n        transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                    {\n                        controller.enqueue({\n                            type: \"0\" /* TextDelta */ ,\n                            value: chunk.textDelta\n                        });\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        if (!toolCalls.has(chunk.toolCallId)) {\n                            toolCalls.add(chunk.toolCallId);\n                            controller.enqueue({\n                                type: \"1\" /* ToolCallBegin */ ,\n                                value: {\n                                    id: chunk.toolCallId,\n                                    name: chunk.toolName\n                                }\n                            });\n                        }\n                        controller.enqueue({\n                            type: \"2\" /* ToolCallArgsTextDelta */ ,\n                            value: chunk.argsTextDelta\n                        });\n                        break;\n                    }\n                // ignore\n                case \"tool-call\":\n                case \"response-metadata\":\n                    break;\n                case \"tool-result\":\n                    {\n                        controller.enqueue({\n                            type: \"3\" /* ToolCallResult */ ,\n                            value: {\n                                id: chunk.toolCallId,\n                                result: chunk.result\n                            }\n                        });\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        const { type, ...rest } = chunk;\n                        controller.enqueue({\n                            type: \"F\" /* Finish */ ,\n                            value: rest\n                        });\n                        break;\n                    }\n                case \"error\":\n                    {\n                        controller.enqueue({\n                            type: \"E\" /* Error */ ,\n                            value: chunk.error\n                        });\n                        break;\n                    }\n                default:\n                    {\n                        const unhandledType = chunkType;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        }\n    });\n}\n// src/types/ModelConfigTypes.ts\n\nvar LanguageModelV1CallSettingsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    maxTokens: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().positive().optional(),\n    temperature: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    topP: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    presencePenalty: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    frequencyPenalty: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().optional(),\n    seed: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().optional(),\n    headers: zod__WEBPACK_IMPORTED_MODULE_1__.z.record(zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()).optional()\n});\nvar LanguageModelConfigSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    apiKey: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    baseUrl: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    modelName: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n});\nvar mergeModelConfigs = (configSet)=>{\n    const configs = Array.from(configSet).map((c)=>c.getModelConfig()).sort((a, b)=>(b.priority ?? 0) - (a.priority ?? 0));\n    return configs.reduce((acc, config)=>{\n        if (config.system) {\n            if (acc.system) {\n                acc.system += `\n\n${config.system}`;\n            } else {\n                acc.system = config.system;\n            }\n        }\n        if (config.tools) {\n            for (const [name, tool] of Object.entries(config.tools)){\n                if (acc.tools?.[name]) {\n                    throw new Error(`You tried to define a tool with the name ${name}, but it already exists.`);\n                }\n                if (!acc.tools) acc.tools = {};\n                acc.tools[name] = tool;\n            }\n        }\n        if (config.config) {\n            acc.config = {\n                ...acc.config,\n                ...config.config\n            };\n        }\n        if (config.callSettings) {\n            acc.callSettings = {\n                ...acc.callSettings,\n                ...config.callSettings\n            };\n        }\n        return acc;\n    }, {});\n};\n// src/runtimes/edge/EdgeRuntimeRequestOptions.ts\n\nvar LanguageModelV1FunctionToolSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"function\"),\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    description: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    parameters: zod__WEBPACK_IMPORTED_MODULE_1__.z.custom((val)=>typeof val === \"object\" && val !== null)\n});\nvar TextContentPartSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"text\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n});\nvar ImageContentPartSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"image\"),\n    image: zod__WEBPACK_IMPORTED_MODULE_1__.z.string()\n});\nvar CoreToolCallContentPartSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"tool-call\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    args: zod__WEBPACK_IMPORTED_MODULE_1__.z.record(zod__WEBPACK_IMPORTED_MODULE_1__.z.unknown()),\n    result: zod__WEBPACK_IMPORTED_MODULE_1__.z.unknown().optional(),\n    isError: zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional()\n});\nvar CoreUserMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.discriminatedUnion(\"type\", [\n        TextContentPartSchema,\n        ImageContentPartSchema\n    ])).min(1)\n});\nvar CoreAssistantMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.discriminatedUnion(\"type\", [\n        TextContentPartSchema,\n        CoreToolCallContentPartSchema\n    ])).min(1)\n});\nvar CoreSystemMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_1__.z.literal(\"system\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_1__.z.tuple([\n        TextContentPartSchema\n    ])\n});\nvar CoreMessageSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.discriminatedUnion(\"role\", [\n    CoreSystemMessageSchema,\n    CoreUserMessageSchema,\n    CoreAssistantMessageSchema\n]);\nvar EdgeRuntimeRequestOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    system: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n    messages: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(CoreMessageSchema).min(1),\n    tools: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(LanguageModelV1FunctionToolSchema).optional()\n}).merge(LanguageModelV1CallSettingsSchema).merge(LanguageModelConfigSchema);\n// src/runtimes/edge/streams/toolResultStream.ts\n\n\nfunction toolResultStream(tools, abortSignal) {\n    const toolCallExecutions = /* @__PURE__ */ new Map();\n    return new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(chunk);\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"tool-call\":\n                    {\n                        const { toolCallId, toolCallType, toolName, args: argsText } = chunk;\n                        const tool = tools?.[toolName];\n                        if (!tool || !tool.execute) return;\n                        const args = secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(argsText);\n                        if (tool.parameters instanceof zod__WEBPACK_IMPORTED_MODULE_1__.z.ZodType) {\n                            const result = tool.parameters.safeParse(args);\n                            if (!result.success) {\n                                controller.enqueue({\n                                    type: \"tool-result\",\n                                    toolCallType,\n                                    toolCallId,\n                                    toolName,\n                                    result: \"Function parameter validation failed. \" + JSON.stringify(result.error.issues),\n                                    isError: true\n                                });\n                                return;\n                            } else {\n                                toolCallExecutions.set(toolCallId, (async ()=>{\n                                    if (!tool.execute) return;\n                                    try {\n                                        const result2 = await tool.execute(args, {\n                                            abortSignal\n                                        });\n                                        controller.enqueue({\n                                            type: \"tool-result\",\n                                            toolCallType,\n                                            toolCallId,\n                                            toolName,\n                                            result: result2\n                                        });\n                                    } catch (error) {\n                                        controller.enqueue({\n                                            type: \"tool-result\",\n                                            toolCallType,\n                                            toolCallId,\n                                            toolName,\n                                            result: \"Error: \" + error,\n                                            isError: true\n                                        });\n                                    } finally{\n                                        toolCallExecutions.delete(toolCallId);\n                                    }\n                                })());\n                            }\n                        }\n                        break;\n                    }\n                // ignore other parts\n                case \"text-delta\":\n                case \"tool-call-delta\":\n                case \"tool-result\":\n                case \"finish\":\n                case \"error\":\n                case \"response-metadata\":\n                    break;\n                default:\n                    {\n                        const unhandledType = chunkType;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        },\n        async flush () {\n            await Promise.all(toolCallExecutions.values());\n        }\n    });\n}\n// src/runtimes/edge/partial-json/parse-partial-json.ts\n\n// src/runtimes/edge/partial-json/fix-json.ts\nfunction fixJson(input) {\n    const stack = [\n        \"ROOT\"\n    ];\n    let lastValidIndex = -1;\n    let literalStart = null;\n    function processValueStart(char, i, swapState) {\n        {\n            switch(char){\n                case '\"':\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_STRING\");\n                        break;\n                    }\n                case \"f\":\n                case \"t\":\n                case \"n\":\n                    {\n                        lastValidIndex = i;\n                        literalStart = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_LITERAL\");\n                        break;\n                    }\n                case \"-\":\n                    {\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"0\":\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"{\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_OBJECT_START\");\n                        break;\n                    }\n                case \"[\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_ARRAY_START\");\n                        break;\n                    }\n            }\n        }\n    }\n    function processAfterObjectValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_OBJECT_AFTER_COMMA\");\n                    break;\n                }\n            case \"}\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    function processAfterArrayValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                    break;\n                }\n            case \"]\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    for(let i = 0; i < input.length; i++){\n        const char = input[i];\n        const currentState = stack[stack.length - 1];\n        switch(currentState){\n            case \"ROOT\":\n                processValueStart(char, i, \"FINISH\");\n                break;\n            case \"INSIDE_OBJECT_START\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_AFTER_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n                {\n                    switch(char){\n                        case \":\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_BEFORE_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n                {\n                    processValueStart(char, i, \"INSIDE_OBJECT_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    processAfterObjectValue(char, i);\n                    break;\n                }\n            case \"INSIDE_STRING\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"\\\\\":\n                            {\n                                stack.push(\"INSIDE_STRING_ESCAPE\");\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n                {\n                    switch(char){\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    switch(char){\n                        case \",\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n                {\n                    processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_STRING_ESCAPE\":\n                {\n                    stack.pop();\n                    lastValidIndex = i;\n                    break;\n                }\n            case \"INSIDE_NUMBER\":\n                {\n                    switch(char){\n                        case \"0\":\n                        case \"1\":\n                        case \"2\":\n                        case \"3\":\n                        case \"4\":\n                        case \"5\":\n                        case \"6\":\n                        case \"7\":\n                        case \"8\":\n                        case \"9\":\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"e\":\n                        case \"E\":\n                        case \"-\":\n                        case \".\":\n                            {\n                                break;\n                            }\n                        case \",\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                break;\n                            }\n                        default:\n                            {\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, i + 1);\n                    if (!\"false\".startsWith(partialLiteral) && !\"true\".startsWith(partialLiteral) && !\"null\".startsWith(partialLiteral)) {\n                        stack.pop();\n                        if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                            processAfterObjectValue(char, i);\n                        } else if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                            processAfterArrayValue(char, i);\n                        }\n                    } else {\n                        lastValidIndex = i;\n                    }\n                    break;\n                }\n        }\n    }\n    let result = input.slice(0, lastValidIndex + 1);\n    for(let i = stack.length - 1; i >= 0; i--){\n        const state = stack[i];\n        switch(state){\n            case \"INSIDE_STRING\":\n                {\n                    result += '\"';\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n            case \"INSIDE_OBJECT_START\":\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    result += \"}\";\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    result += \"]\";\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, input.length);\n                    if (\"true\".startsWith(partialLiteral)) {\n                        result += \"true\".slice(partialLiteral.length);\n                    } else if (\"false\".startsWith(partialLiteral)) {\n                        result += \"false\".slice(partialLiteral.length);\n                    } else if (\"null\".startsWith(partialLiteral)) {\n                        result += \"null\".slice(partialLiteral.length);\n                    }\n                }\n        }\n    }\n    return result;\n}\n// src/runtimes/edge/partial-json/parse-partial-json.ts\nvar parsePartialJson = (json)=>{\n    try {\n        return secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(json);\n    } catch  {\n        try {\n            return secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(fixJson(json));\n        } catch  {\n            return void 0;\n        }\n    }\n};\n// src/runtimes/edge/streams/runResultStream.ts\nfunction runResultStream() {\n    let message = {\n        content: [],\n        status: {\n            type: \"running\"\n        }\n    };\n    const currentToolCall = {\n        toolCallId: \"\",\n        argsText: \"\"\n    };\n    return new TransformStream({\n        transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                    {\n                        message = appendOrUpdateText(message, chunk.textDelta);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        const { toolCallId, toolName, argsTextDelta } = chunk;\n                        if (currentToolCall.toolCallId !== toolCallId) {\n                            currentToolCall.toolCallId = toolCallId;\n                            currentToolCall.argsText = argsTextDelta;\n                        } else {\n                            currentToolCall.argsText += argsTextDelta;\n                        }\n                        message = appendOrUpdateToolCall(message, toolCallId, toolName, currentToolCall.argsText);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"tool-call\":\n                case \"response-metadata\":\n                    break;\n                case \"tool-result\":\n                    {\n                        message = appendOrUpdateToolResult(message, chunk.toolCallId, chunk.toolName, chunk.result);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        message = appendOrUpdateFinish(message, chunk);\n                        controller.enqueue(message);\n                        break;\n                    }\n                case \"error\":\n                    {\n                        if (chunk.error instanceof Error && chunk.error.name === \"AbortError\") {\n                            message = appendOrUpdateCancel(message);\n                            controller.enqueue(message);\n                            break;\n                        } else {\n                            throw chunk.error;\n                        }\n                    }\n                default:\n                    {\n                        const unhandledType = chunkType;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        }\n    });\n}\nvar appendOrUpdateText = (message, textDelta)=>{\n    let contentParts = message.content ?? [];\n    let contentPart = message.content?.at(-1);\n    if (contentPart?.type !== \"text\") {\n        contentPart = {\n            type: \"text\",\n            text: textDelta\n        };\n    } else {\n        contentParts = contentParts.slice(0, -1);\n        contentPart = {\n            type: \"text\",\n            text: contentPart.text + textDelta\n        };\n    }\n    return {\n        ...message,\n        content: contentParts.concat([\n            contentPart\n        ])\n    };\n};\nvar appendOrUpdateToolCall = (message, toolCallId, toolName, argsText)=>{\n    let contentParts = message.content ?? [];\n    let contentPart = message.content?.at(-1);\n    if (contentPart?.type !== \"tool-call\" || contentPart.toolCallId !== toolCallId) {\n        contentPart = {\n            type: \"tool-call\",\n            toolCallId,\n            toolName,\n            argsText,\n            args: parsePartialJson(argsText)\n        };\n    } else {\n        contentParts = contentParts.slice(0, -1);\n        contentPart = {\n            ...contentPart,\n            argsText,\n            args: parsePartialJson(argsText)\n        };\n    }\n    return {\n        ...message,\n        content: contentParts.concat([\n            contentPart\n        ])\n    };\n};\nvar appendOrUpdateToolResult = (message, toolCallId, toolName, result)=>{\n    let found = false;\n    const newContentParts = message.content?.map((part)=>{\n        if (part.type !== \"tool-call\" || part.toolCallId !== toolCallId) return part;\n        found = true;\n        if (part.toolName !== toolName) throw new Error(`Tool call ${toolCallId} found with tool name ${part.toolName}, but expected ${toolName}`);\n        return {\n            ...part,\n            result\n        };\n    });\n    if (!found) throw new Error(`Received tool result for unknown tool call \"${toolName}\" / \"${toolCallId}\". This is likely an internal bug in assistant-ui.`);\n    return {\n        ...message,\n        content: newContentParts\n    };\n};\nvar appendOrUpdateFinish = (message, chunk)=>{\n    const { type, ...rest } = chunk;\n    return {\n        ...message,\n        status: getStatus(chunk),\n        metadata: {\n            ...message.metadata,\n            roundtrips: [\n                ...message.metadata?.roundtrips ?? [],\n                {\n                    logprobs: rest.logprobs,\n                    usage: rest.usage\n                }\n            ]\n        }\n    };\n};\nvar getStatus = (chunk)=>{\n    if (chunk.finishReason === \"tool-calls\") {\n        return {\n            type: \"requires-action\",\n            reason: \"tool-calls\"\n        };\n    } else if (chunk.finishReason === \"stop\" || chunk.finishReason === \"unknown\") {\n        return {\n            type: \"complete\",\n            reason: chunk.finishReason\n        };\n    } else {\n        return {\n            type: \"incomplete\",\n            reason: chunk.finishReason\n        };\n    }\n};\nvar appendOrUpdateCancel = (message)=>{\n    return {\n        ...message,\n        status: {\n            type: \"incomplete\",\n            reason: \"cancelled\"\n        }\n    };\n};\n// src/runtimes/edge/streams/utils/PipeableTransformStream.ts\nvar PipeableTransformStream = class extends TransformStream {\n    constructor(transform){\n        super();\n        const readable = transform(super.readable);\n        Object.defineProperty(this, \"readable\", {\n            value: readable,\n            writable: false\n        });\n    }\n};\n// src/runtimes/edge/streams/utils/streamPartEncoderStream.ts\nfunction encodeStreamPart({ type, value }) {\n    return `${type}:${JSON.stringify(value)}\n`;\n}\nfunction streamPartEncoderStream() {\n    const encodeStream = new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(encodeStreamPart(chunk));\n        }\n    });\n    return new PipeableTransformStream((readable)=>{\n        return readable.pipeThrough(encodeStream).pipeThrough(new TextEncoderStream());\n    });\n}\n// src/runtimes/edge/createEdgeRuntimeAPI.ts\nvar voidStream = ()=>{\n    return new WritableStream({\n        abort (reason) {\n            console.error(\"Server stream processing aborted:\", reason);\n        }\n    });\n};\nvar getEdgeRuntimeStream = async ({ abortSignal, requestData: unsafeRequest, options: { model: modelOrCreator, system: serverSystem, tools: serverTools = {}, toolChoice, onFinish, ...unsafeSettings } })=>{\n    const settings = LanguageModelV1CallSettingsSchema.parse(unsafeSettings);\n    const lmServerTools = toLanguageModelTools(serverTools);\n    const hasServerTools = Object.values(serverTools).some((v)=>!!v.execute);\n    const { system: clientSystem, tools: clientTools = [], messages, apiKey, baseUrl, modelName, ...callSettings } = EdgeRuntimeRequestOptionsSchema.parse(unsafeRequest);\n    const systemMessages = [];\n    if (serverSystem) systemMessages.push(serverSystem);\n    if (clientSystem) systemMessages.push(clientSystem);\n    const system = systemMessages.join(\"\\n\\n\");\n    for (const clientTool of clientTools){\n        if (serverTools?.[clientTool.name]) {\n            throw new Error(`Tool ${clientTool.name} was defined in both the client and server tools. This is not allowed.`);\n        }\n    }\n    let model;\n    model = typeof modelOrCreator === \"function\" ? await modelOrCreator({\n        apiKey,\n        baseUrl,\n        modelName\n    }) : modelOrCreator;\n    let stream;\n    const streamResult = await streamMessage({\n        ...settings,\n        ...callSettings,\n        model,\n        abortSignal,\n        ...!!system ? {\n            system\n        } : void 0,\n        messages,\n        tools: lmServerTools.concat(clientTools),\n        ...toolChoice ? {\n            toolChoice\n        } : void 0\n    });\n    stream = streamResult.stream;\n    const canExecuteTools = hasServerTools && toolChoice?.type !== \"none\";\n    if (canExecuteTools) {\n        stream = stream.pipeThrough(toolResultStream(serverTools, abortSignal));\n    }\n    if (canExecuteTools || onFinish) {\n        const tees = stream.tee();\n        stream = tees[0];\n        let serverStream = tees[1];\n        if (onFinish) {\n            let lastChunk;\n            serverStream = serverStream.pipeThrough(runResultStream()).pipeThrough(new TransformStream({\n                transform (chunk) {\n                    lastChunk = chunk;\n                },\n                flush () {\n                    if (!lastChunk?.status || lastChunk.status.type === \"running\") return;\n                    const resultingMessages = [\n                        ...messages,\n                        toCoreMessage({\n                            role: \"assistant\",\n                            content: lastChunk.content\n                        })\n                    ];\n                    onFinish({\n                        messages: resultingMessages,\n                        metadata: {\n                            roundtrips: lastChunk.metadata?.roundtrips\n                        }\n                    });\n                }\n            }));\n        }\n        serverStream.pipeTo(voidStream()).catch((e)=>{\n            console.error(\"Server stream processing error:\", e);\n        });\n    }\n    return stream;\n};\nvar getEdgeRuntimeResponse = async (options)=>{\n    const stream = await getEdgeRuntimeStream(options);\n    return new Response(stream.pipeThrough(assistantEncoderStream()).pipeThrough(streamPartEncoderStream()), {\n        headers: {\n            \"Content-Type\": \"text/plain; charset=utf-8\"\n        }\n    });\n};\nvar createEdgeRuntimeAPI = (options)=>({\n        POST: async (request)=>getEdgeRuntimeResponse({\n                abortSignal: request.signal,\n                requestData: await request.json(),\n                options\n            })\n    });\nasync function streamMessage({ model, system, messages, tools, toolChoice, ...options }) {\n    return model.doStream({\n        inputFormat: \"messages\",\n        mode: {\n            type: \"regular\",\n            ...tools ? {\n                tools\n            } : void 0,\n            ...toolChoice ? {\n                toolChoice\n            } : void 0\n        },\n        prompt: convertToLanguageModelPrompt(system, messages),\n        ...options\n    });\n}\nfunction convertToLanguageModelPrompt(system, messages) {\n    const languageModelMessages = [];\n    if (system != null) {\n        languageModelMessages.push({\n            role: \"system\",\n            content: system\n        });\n    }\n    languageModelMessages.push(...toLanguageModelMessages(messages));\n    return languageModelMessages;\n}\n //# sourceMappingURL=chunk-ZQNZLTZL.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-ZQNZLTZL.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/index.mjs":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/index.mjs ***!
  \******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionBarPrimitive: () => (/* binding */ actionBar_exports),\n/* harmony export */   AssistantActionBar: () => (/* binding */ assistant_action_bar_default),\n/* harmony export */   AssistantMessage: () => (/* binding */ assistant_message_default),\n/* harmony export */   AssistantModal: () => (/* binding */ assistant_modal_default),\n/* harmony export */   AssistantModalPrimitive: () => (/* binding */ assistantModal_exports),\n/* harmony export */   AssistantRuntimeProvider: () => (/* binding */ AssistantRuntimeProvider),\n/* harmony export */   BranchPicker: () => (/* binding */ branch_picker_default),\n/* harmony export */   BranchPickerPrimitive: () => (/* binding */ branchPicker_exports),\n/* harmony export */   Composer: () => (/* binding */ composer_default),\n/* harmony export */   ComposerAttachment: () => (/* binding */ composer_attachment_default),\n/* harmony export */   ComposerPrimitive: () => (/* binding */ composer_exports),\n/* harmony export */   CompositeAttachmentAdapter: () => (/* binding */ CompositeAttachmentAdapter),\n/* harmony export */   ContentPart: () => (/* binding */ content_part_default),\n/* harmony export */   ContentPartPrimitive: () => (/* binding */ contentPart_exports),\n/* harmony export */   EdgeChatAdapter: () => (/* binding */ EdgeChatAdapter),\n/* harmony export */   EditComposer: () => (/* binding */ edit_composer_default),\n/* harmony export */   ExternalStoreRuntime: () => (/* binding */ ExternalStoreRuntime),\n/* harmony export */   INTERNAL: () => (/* binding */ internal_exports),\n/* harmony export */   MessagePrimitive: () => (/* binding */ message_exports),\n/* harmony export */   SimpleImageAttachmentAdapter: () => (/* binding */ SimpleImageAttachmentAdapter),\n/* harmony export */   SimpleTextAttachmentAdapter: () => (/* binding */ SimpleTextAttachmentAdapter),\n/* harmony export */   Thread: () => (/* binding */ thread_default),\n/* harmony export */   ThreadConfigProvider: () => (/* binding */ ThreadConfigProvider),\n/* harmony export */   ThreadPrimitive: () => (/* binding */ thread_exports),\n/* harmony export */   ThreadWelcome: () => (/* binding */ thread_welcome_default),\n/* harmony export */   UserActionBar: () => (/* binding */ user_action_bar_default),\n/* harmony export */   UserMessage: () => (/* binding */ user_message_default),\n/* harmony export */   UserMessageAttachment: () => (/* binding */ user_message_attachment_default),\n/* harmony export */   WebSpeechSynthesisAdapter: () => (/* binding */ WebSpeechSynthesisAdapter),\n/* harmony export */   fromCoreMessage: () => (/* binding */ fromCoreMessage),\n/* harmony export */   fromCoreMessages: () => (/* binding */ fromCoreMessages),\n/* harmony export */   fromLanguageModelMessages: () => (/* binding */ fromLanguageModelMessages),\n/* harmony export */   fromLanguageModelTools: () => (/* binding */ fromLanguageModelTools),\n/* harmony export */   getExternalStoreMessage: () => (/* binding */ getExternalStoreMessage),\n/* harmony export */   makeAssistantTool: () => (/* binding */ makeAssistantTool),\n/* harmony export */   makeAssistantToolUI: () => (/* binding */ makeAssistantToolUI),\n/* harmony export */   streamUtils: () => (/* binding */ streamUtils),\n/* harmony export */   subscribeToMainThread: () => (/* binding */ subscribeToMainThread),\n/* harmony export */   toCoreMessage: () => (/* reexport safe */ _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toCoreMessage),\n/* harmony export */   toCoreMessages: () => (/* reexport safe */ _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toCoreMessages),\n/* harmony export */   toLanguageModelMessages: () => (/* reexport safe */ _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toLanguageModelMessages),\n/* harmony export */   toLanguageModelTools: () => (/* reexport safe */ _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toLanguageModelTools),\n/* harmony export */   useActionBarCopy: () => (/* binding */ useActionBarCopy),\n/* harmony export */   useActionBarEdit: () => (/* binding */ useActionBarEdit),\n/* harmony export */   useActionBarReload: () => (/* binding */ useActionBarReload),\n/* harmony export */   useActionBarSpeak: () => (/* binding */ useActionBarSpeak),\n/* harmony export */   useActionBarStopSpeaking: () => (/* binding */ useActionBarStopSpeaking),\n/* harmony export */   useAppendMessage: () => (/* binding */ useAppendMessage),\n/* harmony export */   useAssistantContext: () => (/* binding */ useAssistantContext),\n/* harmony export */   useAssistantInstructions: () => (/* binding */ useAssistantInstructions),\n/* harmony export */   useAssistantTool: () => (/* binding */ useAssistantTool),\n/* harmony export */   useAssistantToolUI: () => (/* binding */ useAssistantToolUI),\n/* harmony export */   useBranchPickerCount: () => (/* binding */ useBranchPickerCount),\n/* harmony export */   useBranchPickerNext: () => (/* binding */ useBranchPickerNext),\n/* harmony export */   useBranchPickerNumber: () => (/* binding */ useBranchPickerNumber),\n/* harmony export */   useBranchPickerPrevious: () => (/* binding */ useBranchPickerPrevious),\n/* harmony export */   useComposerAddAttachment: () => (/* binding */ useComposerAddAttachment),\n/* harmony export */   useComposerCancel: () => (/* binding */ useComposerCancel),\n/* harmony export */   useComposerContext: () => (/* binding */ useComposerContext),\n/* harmony export */   useComposerIf: () => (/* binding */ useComposerIf),\n/* harmony export */   useComposerSend: () => (/* binding */ useComposerSend),\n/* harmony export */   useContentPartContext: () => (/* binding */ useContentPartContext),\n/* harmony export */   useContentPartDisplay: () => (/* binding */ useContentPartDisplay),\n/* harmony export */   useContentPartImage: () => (/* binding */ useContentPartImage),\n/* harmony export */   useContentPartText: () => (/* binding */ useContentPartText),\n/* harmony export */   useDangerousInBrowserRuntime: () => (/* binding */ useDangerousInBrowserRuntime),\n/* harmony export */   useEdgeRuntime: () => (/* binding */ useEdgeRuntime),\n/* harmony export */   useExternalMessageConverter: () => (/* binding */ useExternalMessageConverter),\n/* harmony export */   useExternalStoreRuntime: () => (/* binding */ useExternalStoreRuntime),\n/* harmony export */   useLocalRuntime: () => (/* binding */ useLocalRuntime),\n/* harmony export */   useMessageContext: () => (/* binding */ useMessageContext),\n/* harmony export */   useMessageIf: () => (/* binding */ useMessageIf),\n/* harmony export */   useSwitchToNewThread: () => (/* binding */ useSwitchToNewThread),\n/* harmony export */   useThreadConfig: () => (/* binding */ useThreadConfig),\n/* harmony export */   useThreadContext: () => (/* binding */ useThreadContext),\n/* harmony export */   useThreadEmpty: () => (/* binding */ useThreadEmpty),\n/* harmony export */   useThreadIf: () => (/* binding */ useThreadIf),\n/* harmony export */   useThreadScrollToBottom: () => (/* binding */ useThreadScrollToBottom),\n/* harmony export */   useThreadSuggestion: () => (/* binding */ useThreadSuggestion)\n/* harmony export */ });\n/* harmony import */ var _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-ZQNZLTZL.mjs */ \"(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-ZQNZLTZL.mjs\");\n/* harmony import */ var _chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-BJPOCE4O.mjs */ \"(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/chunk-BJPOCE4O.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@14.2.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"(ssr)/../node_modules/.pnpm/zustand@4.5.5_@types+react@18.3.5_react@18.3.1/node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/../node_modules/.pnpm/nanoid@5.0.7/node_modules/nanoid/non-secure/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../node_modules/.pnpm/next@14.2.9_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-use-callback-ref@1.1.0_@types+react@18.3.5_react@18.3.1/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-tooltip@1.1.2_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ \"(ssr)/../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js\");\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! class-variance-authority */ \"(ssr)/../node_modules/.pnpm/class-variance-authority@0.7.0/node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @radix-ui/react-primitive */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-primitive@2.0.0_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@radix-ui/react-primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @radix-ui/primitive */ \"(ssr)/../node_modules/.pnpm/@radix-ui+primitive@1.1.0/node_modules/@radix-ui/primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @radix-ui/react-use-escape-keydown */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-use-escape-keydown@1.1.0_@types+react@18.3.5_react@18.3.1/node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-popover@1.1.1_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-compose-refs@1.1.0_@types+react@18.3.5_react@18.3.1/node_modules/@radix-ui/react-compose-refs/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-slot@1.1.0_@types+react@18.3.5_react@18.3.1/node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react_textarea_autosize__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-textarea-autosize */ \"(ssr)/../node_modules/.pnpm/react-textarea-autosize@8.5.3_@types+react@18.3.5_react@18.3.1/node_modules/react-textarea-autosize/dist/react-textarea-autosize.development.esm.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/check.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/copy.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/audio-lines.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/circle-stop.js\");\n/* harmony import */ var _barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=AudioLinesIcon,CheckIcon,CopyIcon,RefreshCwIcon,StopCircleIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/refresh-cw.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronLeftIcon,ChevronRightIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/chevron-left.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronLeftIcon,ChevronRightIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/chevron-right.js\");\n/* harmony import */ var _radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @radix-ui/react-avatar */ \"(ssr)/../node_modules/.pnpm/@radix-ui+react-avatar@1.1.0_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@radix-ui/react-avatar/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=BotIcon,ChevronDownIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/bot.js\");\n/* harmony import */ var _barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=BotIcon,ChevronDownIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/chevron-down.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDownIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/arrow-down.js\");\n/* harmony import */ var _barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=PaperclipIcon,SendHorizontalIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/paperclip.js\");\n/* harmony import */ var _barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=PaperclipIcon,SendHorizontalIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/send-horizontal.js\");\n/* harmony import */ var _barrel_optimize_names_CircleXIcon_lucide_react__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=CircleXIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/circle-x.js\");\n/* harmony import */ var _barrel_optimize_names_PencilIcon_lucide_react__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=PencilIcon!=!lucide-react */ \"(ssr)/../node_modules/.pnpm/lucide-react@0.439.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/pencil.js\");\n/* __next_internal_client_entry_do_not_use__ ActionBarPrimitive,AssistantActionBar,AssistantMessage,AssistantModal,AssistantModalPrimitive,AssistantRuntimeProvider,BranchPicker,BranchPickerPrimitive,Composer,ComposerAttachment,ComposerPrimitive,CompositeAttachmentAdapter,ContentPart,ContentPartPrimitive,EdgeChatAdapter,EditComposer,ExternalStoreRuntime,INTERNAL,MessagePrimitive,SimpleImageAttachmentAdapter,SimpleTextAttachmentAdapter,Thread,ThreadConfigProvider,ThreadPrimitive,ThreadWelcome,UserActionBar,UserMessage,UserMessageAttachment,WebSpeechSynthesisAdapter,fromCoreMessage,fromCoreMessages,fromLanguageModelMessages,fromLanguageModelTools,getExternalStoreMessage,makeAssistantTool,makeAssistantToolUI,streamUtils,subscribeToMainThread,toCoreMessage,toCoreMessages,toLanguageModelMessages,toLanguageModelTools,useActionBarCopy,useActionBarEdit,useActionBarReload,useActionBarSpeak,useActionBarStopSpeaking,useAppendMessage,useAssistantContext,useAssistantInstructions,useAssistantTool,useAssistantToolUI,useBranchPickerCount,useBranchPickerNext,useBranchPickerNumber,useBranchPickerPrevious,useComposerAddAttachment,useComposerCancel,useComposerContext,useComposerIf,useComposerSend,useContentPartContext,useContentPartDisplay,useContentPartImage,useContentPartText,useDangerousInBrowserRuntime,useEdgeRuntime,useExternalMessageConverter,useExternalStoreRuntime,useLocalRuntime,useMessageContext,useMessageIf,useSwitchToNewThread,useThreadConfig,useThreadContext,useThreadEmpty,useThreadIf,useThreadScrollToBottom,useThreadSuggestion auto */ \n\n// src/context/providers/AssistantRuntimeProvider.tsx\n\n// src/context/providers/AssistantProvider.tsx\n\n// src/context/react/AssistantContext.ts\n\nvar AssistantContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useAssistantContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AssistantContext);\n    if (!options?.optional && !context) throw new Error(\"This component must be used within an AssistantRuntimeProvider.\");\n    return context;\n}\n// src/context/stores/AssistantModelConfig.ts\n\n// src/utils/ProxyConfigProvider.ts\nvar ProxyConfigProvider = class {\n    getModelConfig() {\n        return (0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.mergeModelConfigs)(this._providers);\n    }\n    registerModelConfigProvider(provider) {\n        this._providers.add(provider);\n        return ()=>{\n            this._providers.delete(provider);\n        };\n    }\n    constructor(){\n        this._providers = /* @__PURE__ */ new Set();\n    }\n};\n// src/context/stores/AssistantModelConfig.ts\nvar makeAssistantModelConfigStore = ()=>(0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>{\n        const proxy = new ProxyConfigProvider();\n        return Object.freeze({\n            getModelConfig: ()=>{\n                return proxy.getModelConfig();\n            },\n            registerModelConfigProvider: (provider)=>{\n                return proxy.registerModelConfigProvider(provider);\n            }\n        });\n    });\n// src/context/stores/AssistantToolUIs.ts\n\nvar makeAssistantToolUIsStore = ()=>(0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)((set)=>{\n        const renderers = /* @__PURE__ */ new Map();\n        return Object.freeze({\n            getToolUI: (name)=>{\n                const arr = renderers.get(name);\n                const last = arr?.at(-1);\n                if (last) return last;\n                return null;\n            },\n            setToolUI: (name, render)=>{\n                let arr = renderers.get(name);\n                if (!arr) {\n                    arr = [];\n                    renderers.set(name, arr);\n                }\n                arr.push(render);\n                set({});\n                return ()=>{\n                    const index = arr.indexOf(render);\n                    if (index !== -1) {\n                        arr.splice(index, 1);\n                    }\n                    if (index === arr.length) {\n                        set({});\n                    }\n                };\n            }\n        });\n    });\n// src/context/providers/ThreadProvider.tsx\n\n// src/context/react/ThreadContext.ts\n\nvar ThreadContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useThreadContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThreadContext);\n    if (!options?.optional && !context) throw new Error(\"This component must be used within an AssistantRuntimeProvider.\");\n    return context;\n}\n// src/context/stores/Composer.ts\n\nvar makeComposerStore = (useThreadRuntime)=>{\n    const focusListeners = /* @__PURE__ */ new Set();\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)()((_, get)=>{\n        const runtime = useThreadRuntime.getState();\n        return {\n            get value () {\n                return get().text;\n            },\n            setValue (value) {\n                get().setText(value);\n            },\n            attachments: runtime.composer.attachments,\n            addAttachment: (file)=>{\n                useThreadRuntime.getState().composer.addAttachment(file);\n            },\n            removeAttachment: (attachmentId)=>{\n                useThreadRuntime.getState().composer.removeAttachment(attachmentId);\n            },\n            reset: ()=>{\n                useThreadRuntime.getState().composer.reset();\n            },\n            text: runtime.composer.text,\n            setText: (text)=>{\n                useThreadRuntime.getState().composer.setText(text);\n            },\n            canCancel: runtime.capabilities.cancel,\n            isEditing: true,\n            isEmpty: runtime.composer.isEmpty,\n            send: ()=>{\n                const runtime2 = useThreadRuntime.getState();\n                runtime2.composer.send();\n            },\n            cancel: ()=>{\n                useThreadRuntime.getState().cancelRun();\n            },\n            focus: ()=>{\n                for (const listener of focusListeners){\n                    listener();\n                }\n            },\n            onFocus: (listener)=>{\n                focusListeners.add(listener);\n                return ()=>{\n                    focusListeners.delete(listener);\n                };\n            }\n        };\n    });\n};\n// src/context/stores/Thread.ts\n\nvar getThreadStateFromRuntime = (runtime)=>{\n    const lastMessage = runtime.messages.at(-1);\n    return Object.freeze({\n        threadId: runtime.threadId,\n        capabilities: runtime.capabilities,\n        isDisabled: runtime.isDisabled,\n        isRunning: lastMessage?.role !== \"assistant\" ? false : lastMessage.status.type === \"running\"\n    });\n};\nvar makeThreadStore = (runtimeRef)=>{\n    const runtime = runtimeRef.getState();\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>getThreadStateFromRuntime(runtime));\n};\n// src/context/stores/ThreadViewport.tsx\n\nvar makeThreadViewportStore = ()=>{\n    const scrollToBottomListeners = /* @__PURE__ */ new Set();\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>({\n            isAtBottom: true,\n            scrollToBottom: ()=>{\n                for (const listener of scrollToBottomListeners){\n                    listener();\n                }\n            },\n            onScrollToBottom: (callback)=>{\n                scrollToBottomListeners.add(callback);\n                return ()=>{\n                    scrollToBottomListeners.delete(callback);\n                };\n            }\n        }));\n};\n// src/context/stores/ThreadActions.ts\n\nvar makeThreadActionStore = (runtimeStore)=>{\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>Object.freeze({\n            getBranches: (messageId)=>runtimeStore.getState().getBranches(messageId),\n            switchToBranch: (branchId)=>runtimeStore.getState().switchToBranch(branchId),\n            startRun: (parentId)=>runtimeStore.getState().startRun(parentId),\n            append: (message)=>runtimeStore.getState().append(message),\n            cancelRun: ()=>runtimeStore.getState().cancelRun(),\n            addToolResult: (options)=>runtimeStore.getState().addToolResult(options),\n            speak: (messageId)=>runtimeStore.getState().speak(messageId)\n        }));\n};\n// src/context/stores/ThreadMessages.ts\n\nvar makeThreadMessagesStore = (runtimeRef)=>{\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>runtimeRef.getState().messages);\n};\n// src/context/stores/ThreadRuntime.tsx\n\nvar makeThreadRuntimeStore = (runtime)=>{\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>runtime);\n};\n// src/runtimes/core/subscribeToMainThread.ts\nvar subscribeToMainThread = (runtime, callback)=>{\n    let first = true;\n    let cleanup;\n    const inner = ()=>{\n        cleanup?.();\n        cleanup = runtime.thread.subscribe(callback);\n        if (!first) {\n            callback();\n        }\n        first = false;\n    };\n    const unsubscribe = runtime.subscribe(inner);\n    inner();\n    return ()=>{\n        unsubscribe();\n        cleanup?.();\n    };\n};\n// src/runtimes/local/useLocalRuntime.tsx\n\n// src/runtimes/core/BaseAssistantRuntime.tsx\nvar BaseAssistantRuntime = class {\n    constructor(_thread){\n        this._subscriptions = /* @__PURE__ */ new Set();\n        this.subscriptionHandler = ()=>{\n            for (const callback of this._subscriptions)callback();\n        };\n        this._thread = _thread;\n        this._thread = _thread;\n    }\n    get thread() {\n        return this._thread;\n    }\n    set thread(thread) {\n        this._thread = thread;\n        this.subscriptionHandler();\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        return ()=>this._subscriptions.delete(callback);\n    }\n};\n// src/internal.ts\nvar internal_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(internal_exports, {\n    BaseAssistantRuntime: ()=>BaseAssistantRuntime,\n    MessageRepository: ()=>MessageRepository,\n    ProxyConfigProvider: ()=>ProxyConfigProvider,\n    ThreadRuntimeComposer: ()=>ThreadRuntimeComposer,\n    TooltipIconButton: ()=>TooltipIconButton,\n    generateId: ()=>generateId,\n    useSmooth: ()=>useSmooth,\n    useSmoothStatus: ()=>useSmoothStatus,\n    withSmoothContextProvider: ()=>withSmoothContextProvider\n});\n// src/runtimes/utils/ThreadRuntimeComposer.tsx\nvar ThreadRuntimeComposer = class {\n    constructor(runtime, notifySubscribers){\n        this.attachmentAccept = \"*\";\n        this._attachments = [];\n        this._text = \"\";\n        this.runtime = runtime;\n        this.notifySubscribers = notifySubscribers;\n    }\n    get isEmpty() {\n        return !this.text.trim() && !this.attachments.length;\n    }\n    setAttachmentAdapter(adapter) {\n        this._attachmentAdapter = adapter;\n        const accept = adapter?.accept ?? \"*\";\n        if (this.attachmentAccept !== accept) {\n            this.attachmentAccept = accept;\n            return true;\n        }\n        return false;\n    }\n    get attachments() {\n        return this._attachments;\n    }\n    async addAttachment(file) {\n        if (!this._attachmentAdapter) throw new Error(\"Attachments are not supported\");\n        const attachment = await this._attachmentAdapter.add({\n            file\n        });\n        this._attachments = [\n            ...this._attachments,\n            attachment\n        ];\n        this.notifySubscribers();\n    }\n    async removeAttachment(attachmentId) {\n        if (!this._attachmentAdapter) throw new Error(\"Attachments are not supported\");\n        const index = this._attachments.findIndex((a)=>a.id === attachmentId);\n        if (index === -1) throw new Error(\"Attachment not found\");\n        const attachment = this._attachments[index];\n        await this._attachmentAdapter.remove(attachment);\n        this._attachments = this._attachments.toSpliced(index, 1);\n        this.notifySubscribers();\n    }\n    get text() {\n        return this._text;\n    }\n    setText(value) {\n        this._text = value;\n        this.notifySubscribers();\n    }\n    reset() {\n        this._text = \"\";\n        this._attachments = [];\n        this.notifySubscribers();\n    }\n    async send() {\n        const attachments = this._attachmentAdapter ? await Promise.all(this.attachments.map(async (a)=>await this._attachmentAdapter.send(a))) : [];\n        this.runtime.append({\n            parentId: this.runtime.messages.at(-1)?.id ?? null,\n            role: \"user\",\n            content: this.text ? [\n                {\n                    type: \"text\",\n                    text: this.text\n                }\n            ] : [],\n            attachments\n        });\n        this.reset();\n    }\n};\n// src/utils/idUtils.tsx\n\nvar generateId = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_4__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\nvar optimisticPrefix = \"__optimistic__\";\nvar generateOptimisticId = ()=>`${optimisticPrefix}${generateId()}`;\n// src/runtimes/edge/converters/fromCoreMessage.ts\nvar fromCoreMessages = (message)=>{\n    return message.map((message2)=>fromCoreMessage(message2));\n};\nvar fromCoreMessage = (message, { id = generateId(), status = {\n    type: \"complete\",\n    reason: \"unknown\"\n} } = {})=>{\n    const commonProps = {\n        id,\n        createdAt: /* @__PURE__ */ new Date()\n    };\n    const role = message.role;\n    switch(role){\n        case \"assistant\":\n            return {\n                ...commonProps,\n                role,\n                content: message.content.map((part)=>{\n                    if (part.type === \"tool-call\") {\n                        return {\n                            ...part,\n                            argsText: JSON.stringify(part.args)\n                        };\n                    }\n                    return part;\n                }),\n                status\n            };\n        case \"user\":\n            return {\n                ...commonProps,\n                role,\n                content: message.content,\n                attachments: []\n            };\n        case \"system\":\n            return {\n                ...commonProps,\n                role,\n                content: message.content\n            };\n        default:\n            {\n                const unsupportedRole = role;\n                throw new Error(`Unknown message role: ${unsupportedRole}`);\n            }\n    }\n};\n// src/runtimes/utils/MessageRepository.tsx\nvar findHead = (message)=>{\n    if (message.next) return findHead(message.next);\n    if (\"current\" in message) return message;\n    return null;\n};\nvar MessageRepository = class {\n    performOp(newParent, child, operation) {\n        const parentOrRoot = child.prev ?? this.root;\n        const newParentOrRoot = newParent ?? this.root;\n        if (operation === \"relink\" && parentOrRoot === newParentOrRoot) return;\n        if (operation !== \"link\") {\n            parentOrRoot.children = parentOrRoot.children.filter((m)=>m !== child.current.id);\n            if (parentOrRoot.next === child) {\n                const fallbackId = parentOrRoot.children.at(-1);\n                const fallback = fallbackId ? this.messages.get(fallbackId) : null;\n                if (fallback === void 0) {\n                    throw new Error(\"MessageRepository(performOp/cut): Fallback sibling message not found. This is likely an internal bug in assistant-ui.\");\n                }\n                parentOrRoot.next = fallback;\n            }\n        }\n        if (operation !== \"cut\") {\n            for(let current = newParent; current; current = current.prev){\n                if (current.current.id === child.current.id) {\n                    throw new Error(\"MessageRepository(performOp/link): A message with the same id already exists in the parent tree. This error occurs if the same message id is found multiple times. This is likely an internal bug in assistant-ui.\");\n                }\n            }\n            newParentOrRoot.children = [\n                ...newParentOrRoot.children,\n                child.current.id\n            ];\n            if (findHead(child) === this.head || newParentOrRoot.next === null) {\n                newParentOrRoot.next = child;\n            }\n            child.prev = newParent;\n        }\n    }\n    getMessages() {\n        const messages = new Array(this.head?.level ?? 0);\n        for(let current = this.head; current; current = current.prev){\n            messages[current.level] = current.current;\n        }\n        return messages;\n    }\n    addOrUpdateMessage(parentId, message) {\n        const existingItem = this.messages.get(message.id);\n        const prev = parentId ? this.messages.get(parentId) : null;\n        if (prev === void 0) throw new Error(\"MessageRepository(addOrUpdateMessage): Parent message not found. This is likely an internal bug in assistant-ui.\");\n        if (existingItem) {\n            existingItem.current = message;\n            this.performOp(prev, existingItem, \"relink\");\n            return;\n        }\n        const newItem = {\n            prev,\n            current: message,\n            next: null,\n            children: [],\n            level: prev ? prev.level + 1 : 0\n        };\n        this.messages.set(message.id, newItem);\n        this.performOp(prev, newItem, \"link\");\n        if (this.head === prev) {\n            this.head = newItem;\n        }\n    }\n    getMessage(messageId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(updateMessage): Message not found. This is likely an internal bug in assistant-ui.\");\n        return {\n            parentId: message.prev?.current.id ?? null,\n            message: message.current\n        };\n    }\n    appendOptimisticMessage(parentId, message) {\n        let optimisticId;\n        do {\n            optimisticId = generateOptimisticId();\n        }while (this.messages.has(optimisticId));\n        this.addOrUpdateMessage(parentId, fromCoreMessage(message, {\n            id: optimisticId,\n            status: {\n                type: \"running\"\n            }\n        }));\n        return optimisticId;\n    }\n    deleteMessage(messageId, replacementId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(deleteMessage): Optimistic message not found. This is likely an internal bug in assistant-ui.\");\n        const replacement = replacementId === void 0 ? message.prev : replacementId === null ? null : this.messages.get(replacementId);\n        if (replacement === void 0) throw new Error(\"MessageRepository(deleteMessage): Replacement not found. This is likely an internal bug in assistant-ui.\");\n        for (const child of message.children){\n            const childMessage = this.messages.get(child);\n            if (!childMessage) throw new Error(\"MessageRepository(deleteMessage): Child message not found. This is likely an internal bug in assistant-ui.\");\n            this.performOp(replacement, childMessage, \"relink\");\n        }\n        this.performOp(null, message, \"cut\");\n        this.messages.delete(messageId);\n        if (this.head === message) {\n            this.head = findHead(replacement ?? this.root);\n        }\n    }\n    getBranches(messageId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(getBranches): Message not found. This is likely an internal bug in assistant-ui.\");\n        const { children } = message.prev ?? this.root;\n        return children;\n    }\n    switchToBranch(messageId) {\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(switchToBranch): Branch not found. This is likely an internal bug in assistant-ui.\");\n        const prevOrRoot = message.prev ?? this.root;\n        prevOrRoot.next = message;\n        this.head = findHead(message);\n    }\n    resetHead(messageId) {\n        if (messageId === null) {\n            this.head = null;\n            return;\n        }\n        const message = this.messages.get(messageId);\n        if (!message) throw new Error(\"MessageRepository(resetHead): Branch not found. This is likely an internal bug in assistant-ui.\");\n        this.head = message;\n        for(let current = message; current; current = current.prev){\n            if (current.prev) {\n                current.prev.next = current;\n            }\n        }\n    }\n    export() {\n        const exportItems = [];\n        for (const [, message] of this.messages){\n            exportItems.push({\n                message: message.current,\n                parentId: message.prev?.current.id ?? null\n            });\n        }\n        return {\n            headId: this.head?.current.id ?? null,\n            messages: exportItems\n        };\n    }\n    import({ headId, messages }) {\n        for (const { message, parentId } of messages){\n            this.addOrUpdateMessage(parentId, message);\n        }\n        this.resetHead(headId ?? messages.at(-1)?.message.id ?? null);\n    }\n    constructor(){\n        this.messages = /* @__PURE__ */ new Map();\n        // message_id -> item\n        this.head = null;\n        this.root = {\n            children: [],\n            next: null\n        };\n    }\n};\n// src/utils/smooth/useSmooth.tsx\n\n// src/utils/smooth/SmoothContext.tsx\n\n\n\nvar SmoothContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar makeSmoothContext = (initialState)=>{\n    const useSmoothStatus2 = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>initialState);\n    return {\n        useSmoothStatus: useSmoothStatus2\n    };\n};\nvar SmoothContextProvider = ({ children })=>{\n    const outer = useSmoothContext({\n        optional: true\n    });\n    const { useContentPart } = useContentPartContext();\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>makeSmoothContext(useContentPart.getState().status));\n    if (outer) return children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(SmoothContext.Provider, {\n        value: context,\n        children\n    });\n};\nvar withSmoothContextProvider = (Component)=>{\n    const Wrapped = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(SmoothContextProvider, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Component, {\n                ...props,\n                ref\n            })\n        });\n    });\n    Wrapped.displayName = Component.displayName;\n    return Wrapped;\n};\nfunction useSmoothContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SmoothContext);\n    if (!options?.optional && !context) throw new Error(\"This component must be used within a SmoothContextProvider.\");\n    return context;\n}\nvar useSmoothStatus = ()=>{\n    const { useSmoothStatus: useSmoothStatus2 } = useSmoothContext();\n    return useSmoothStatus2();\n};\n// src/utils/smooth/useSmooth.tsx\n\nvar TextStreamAnimator = class {\n    constructor(currentText, setText){\n        this.animationFrameId = null;\n        this.lastUpdateTime = Date.now();\n        this.targetText = \"\";\n        this.animate = ()=>{\n            const currentTime = Date.now();\n            const deltaTime = currentTime - this.lastUpdateTime;\n            let timeToConsume = deltaTime;\n            const remainingChars = this.targetText.length - this.currentText.length;\n            const baseTimePerChar = Math.min(5, 250 / remainingChars);\n            let charsToAdd = 0;\n            while(timeToConsume >= baseTimePerChar && charsToAdd < remainingChars){\n                charsToAdd++;\n                timeToConsume -= baseTimePerChar;\n            }\n            if (charsToAdd !== remainingChars) {\n                this.animationFrameId = requestAnimationFrame(this.animate);\n            } else {\n                this.animationFrameId = null;\n            }\n            if (charsToAdd === 0) return;\n            this.currentText = this.targetText.slice(0, this.currentText.length + charsToAdd);\n            this.lastUpdateTime = currentTime - timeToConsume;\n            this.setText(this.currentText);\n        };\n        this.currentText = currentText;\n        this.setText = setText;\n    }\n    start() {\n        if (this.animationFrameId !== null) return;\n        this.lastUpdateTime = Date.now();\n        this.animate();\n    }\n    stop() {\n        if (this.animationFrameId !== null) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n        }\n    }\n};\nvar SMOOTH_STATUS = Object.freeze({\n    type: \"running\"\n});\nvar useSmooth = (state, smooth = false)=>{\n    const { useSmoothStatus: useSmoothStatus2 } = useSmoothContext({\n        optional: true\n    }) ?? {};\n    const { part: { text } } = state;\n    const { useMessage } = useMessageContext();\n    const id = useMessage((m)=>m.message.id);\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(id);\n    const [displayedText, setDisplayedText] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(text);\n    const setText = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_6__.useCallbackRef)((text2)=>{\n        setDisplayedText(text2);\n        useSmoothStatus2?.setState(text2 !== state.part.text ? SMOOTH_STATUS : state.status);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        useSmoothStatus2?.setState(text !== displayedText ? SMOOTH_STATUS : state.status);\n    }, [\n        useSmoothStatus2,\n        text,\n        displayedText,\n        state.status\n    ]);\n    const [animatorRef] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new TextStreamAnimator(text, setText));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!smooth) {\n            animatorRef.stop();\n            return;\n        }\n        if (idRef.current !== id || !text.startsWith(animatorRef.targetText)) {\n            idRef.current = id;\n            setText(text);\n            animatorRef.currentText = text;\n            animatorRef.targetText = text;\n            animatorRef.stop();\n            return;\n        }\n        animatorRef.targetText = text;\n        animatorRef.start();\n    }, [\n        setText,\n        animatorRef,\n        id,\n        smooth,\n        text\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            animatorRef.stop();\n        };\n    }, [\n        animatorRef\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>smooth ? {\n            part: {\n                type: \"text\",\n                text: displayedText\n            },\n            status: text === displayedText ? state.status : SMOOTH_STATUS\n        } : state, [\n        smooth,\n        displayedText,\n        state,\n        text\n    ]);\n};\n// src/ui/base/tooltip-icon-button.tsx\n\n// src/ui/base/tooltip.tsx\n\n// src/ui/utils/withDefaults.tsx\n\n\n\nvar withDefaultProps = ({ className, ...defaultProps })=>({ className: classNameProp, ...props })=>{\n        return {\n            className: classnames__WEBPACK_IMPORTED_MODULE_7__(className, classNameProp),\n            ...defaultProps,\n            ...props\n        };\n    };\nvar withDefaults = (Component, defaultProps)=>{\n    const getProps = withDefaultProps(defaultProps);\n    const WithDefaults = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n        const ComponentAsAny = Component;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComponentAsAny, {\n            ...getProps(props),\n            ref\n        });\n    });\n    WithDefaults.displayName = \"withDefaults(\" + (typeof Component === \"string\" ? Component : Component.displayName) + \")\";\n    return WithDefaults;\n};\n// src/ui/base/tooltip.tsx\n\nvar Tooltip = (props)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_8__.Provider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_8__.Root, {\n            ...props\n        })\n    });\n};\nTooltip.displayName = \"Tooltip\";\nvar TooltipTrigger = _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_8__.Trigger;\nvar TooltipContent = withDefaults(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_8__.Content, {\n    sideOffset: 4,\n    className: \"aui-tooltip-content\"\n});\nTooltipContent.displayName = \"TooltipContent\";\n// src/ui/base/button.tsx\n\n\n\n\nvar buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_9__.cva)(\"aui-button\", {\n    variants: {\n        variant: {\n            default: \"aui-button-primary\",\n            outline: \"aui-button-outline\",\n            ghost: \"aui-button-ghost\"\n        },\n        size: {\n            default: \"aui-button-medium\",\n            icon: \"aui-button-icon\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nvar Button = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className, variant, size, ...props }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.button, {\n        className: buttonVariants({\n            variant,\n            size,\n            className\n        }),\n        ...props,\n        ref\n    });\n});\nButton.displayName = \"Button\";\n// src/ui/base/tooltip-icon-button.tsx\n\nvar TooltipIconButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, tooltip, side = \"bottom\", ...rest }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(Tooltip, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipTrigger, {\n                asChild: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(Button, {\n                    variant: \"ghost\",\n                    size: \"icon\",\n                    ...rest,\n                    ref,\n                    children: [\n                        children,\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n                            className: \"aui-sr-only\",\n                            children: tooltip\n                        })\n                    ]\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipContent, {\n                side,\n                children: tooltip\n            })\n        ]\n    });\n});\nTooltipIconButton.displayName = \"TooltipIconButton\";\n// src/runtimes/edge/converters/fromLanguageModelMessages.ts\nvar fromLanguageModelMessages = (lm, { mergeRoundtrips })=>{\n    const messages = [];\n    for (const lmMessage of lm){\n        const role = lmMessage.role;\n        switch(role){\n            case \"system\":\n                {\n                    messages.push({\n                        role: \"system\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: lmMessage.content\n                            }\n                        ]\n                    });\n                    break;\n                }\n            case \"user\":\n                {\n                    messages.push({\n                        role: \"user\",\n                        content: lmMessage.content.map((part)=>{\n                            const type = part.type;\n                            switch(type){\n                                case \"text\":\n                                    {\n                                        return {\n                                            type: \"text\",\n                                            text: part.text\n                                        };\n                                    }\n                                case \"image\":\n                                    {\n                                        if (part.image instanceof URL) {\n                                            return {\n                                                type: \"image\",\n                                                image: part.image.href\n                                            };\n                                        }\n                                        throw new Error(\"Only images with URL data are supported\");\n                                    }\n                                default:\n                                    {\n                                        const unhandledType = type;\n                                        throw new Error(`Unknown content part type: ${unhandledType}`);\n                                    }\n                            }\n                        })\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    const newContent = lmMessage.content.map((part)=>{\n                        if (part.type === \"tool-call\") {\n                            return {\n                                type: \"tool-call\",\n                                toolCallId: part.toolCallId,\n                                toolName: part.toolName,\n                                argsText: JSON.stringify(part.args),\n                                args: part.args\n                            };\n                        }\n                        return part;\n                    });\n                    if (mergeRoundtrips) {\n                        const previousMessage = messages[messages.length - 1];\n                        if (previousMessage?.role === \"assistant\") {\n                            previousMessage.content.push(...newContent);\n                            break;\n                        }\n                    }\n                    messages.push({\n                        role: \"assistant\",\n                        content: newContent\n                    });\n                    break;\n                }\n            case \"tool\":\n                {\n                    const previousMessage = messages[messages.length - 1];\n                    if (previousMessage?.role !== \"assistant\") throw new Error(\"A tool message must be preceded by an assistant message.\");\n                    for (const tool of lmMessage.content){\n                        const toolCall = previousMessage.content.find((c)=>c.type === \"tool-call\" && c.toolCallId === tool.toolCallId);\n                        if (!toolCall) throw new Error(\"Received tool result for an unknown tool call.\");\n                        if (toolCall.toolName !== tool.toolName) throw new Error(\"Tool call name mismatch.\");\n                        toolCall.result = tool.result;\n                        if (tool.isError) {\n                            toolCall.isError = true;\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    const unhandledRole = role;\n                    throw new Error(`Unknown message role: ${unhandledRole}`);\n                }\n        }\n    }\n    return messages;\n};\n// src/runtimes/edge/converters/fromLanguageModelTools.ts\nvar fromLanguageModelTools = (tools)=>{\n    return Object.fromEntries(tools.map((tool)=>[\n            tool.name,\n            {\n                description: tool.description,\n                parameters: tool.parameters\n            }\n        ]));\n};\n// src/runtimes/edge/streams/utils/chunkByLineStream.ts\nfunction chunkByLineStream() {\n    let buffer = \"\";\n    return new TransformStream({\n        transform (chunk, controller) {\n            buffer += chunk;\n            const lines = buffer.split(\"\\n\");\n            for(let i = 0; i < lines.length - 1; i++){\n                controller.enqueue(lines[i]);\n            }\n            buffer = lines[lines.length - 1];\n        },\n        flush (controller) {\n            if (buffer) {\n                controller.enqueue(buffer);\n            }\n        }\n    });\n}\n// src/runtimes/edge/streams/utils/streamPartDecoderStream.ts\nvar decodeStreamPart = (part)=>{\n    const index = part.indexOf(\":\");\n    if (index === -1) throw new Error(\"Invalid stream part\");\n    return {\n        type: part.slice(0, index),\n        value: JSON.parse(part.slice(index + 1))\n    };\n};\nfunction streamPartDecoderStream() {\n    const decodeStream = new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(decodeStreamPart(chunk));\n        }\n    });\n    return new _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.PipeableTransformStream((readable)=>{\n        return readable.pipeThrough(new TextDecoderStream()).pipeThrough(chunkByLineStream()).pipeThrough(decodeStream);\n    });\n}\n// src/runtimes/edge/streams/utils/index.ts\nvar streamUtils = {\n    streamPartEncoderStream: _chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.streamPartEncoderStream,\n    streamPartDecoderStream\n};\n// src/runtimes/edge/useEdgeRuntime.ts\n\n// src/runtimes/edge/streams/assistantDecoderStream.ts\nfunction assistantDecoderStream() {\n    const toolCallNames = /* @__PURE__ */ new Map();\n    let currentToolCall;\n    return new TransformStream({\n        transform ({ type, value }, controller) {\n            if (currentToolCall && type !== \"2\" /* ToolCallArgsTextDelta */  && type !== \"E\" /* Error */ ) {\n                controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallType: \"function\",\n                    toolCallId: currentToolCall.id,\n                    toolName: currentToolCall.name,\n                    args: currentToolCall.argsText\n                });\n                currentToolCall = void 0;\n            }\n            switch(type){\n                case \"0\" /* TextDelta */ :\n                    {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: value\n                        });\n                        break;\n                    }\n                case \"1\" /* ToolCallBegin */ :\n                    {\n                        const { id, name } = value;\n                        toolCallNames.set(id, name);\n                        currentToolCall = {\n                            id,\n                            name,\n                            argsText: \"\"\n                        };\n                        break;\n                    }\n                case \"2\" /* ToolCallArgsTextDelta */ :\n                    {\n                        const delta = value;\n                        currentToolCall.argsText += delta;\n                        controller.enqueue({\n                            type: \"tool-call-delta\",\n                            toolCallType: \"function\",\n                            toolCallId: currentToolCall.id,\n                            toolName: currentToolCall.name,\n                            argsTextDelta: delta\n                        });\n                        break;\n                    }\n                case \"3\" /* ToolCallResult */ :\n                    {\n                        controller.enqueue({\n                            type: \"tool-result\",\n                            toolCallType: \"function\",\n                            toolCallId: value.id,\n                            toolName: toolCallNames.get(value.id),\n                            result: value.result\n                        });\n                        break;\n                    }\n                case \"F\" /* Finish */ :\n                    {\n                        controller.enqueue({\n                            type: \"finish\",\n                            ...value\n                        });\n                        break;\n                    }\n                case \"E\" /* Error */ :\n                    {\n                        controller.enqueue({\n                            type: \"error\",\n                            error: value\n                        });\n                        break;\n                    }\n                default:\n                    {\n                        const unhandledType = type;\n                        throw new Error(`Unhandled chunk type: ${unhandledType}`);\n                    }\n            }\n        }\n    });\n}\n// src/runtimes/edge/EdgeChatAdapter.ts\nfunction asAsyncIterable(source) {\n    return {\n        [Symbol.asyncIterator]: ()=>{\n            const reader = source.getReader();\n            return {\n                async next () {\n                    const { done, value } = await reader.read();\n                    return done ? {\n                        done: true,\n                        value: void 0\n                    } : {\n                        done: false,\n                        value\n                    };\n                }\n            };\n        }\n    };\n}\nvar EdgeChatAdapter = class {\n    constructor(options){\n        this.options = options;\n    }\n    async *run({ messages, abortSignal, config }) {\n        const headers = new Headers(this.options.headers);\n        headers.set(\"Content-Type\", \"application/json\");\n        const result = await fetch(this.options.api, {\n            method: \"POST\",\n            headers,\n            credentials: this.options.credentials ?? \"same-origin\",\n            body: JSON.stringify({\n                system: config.system,\n                messages: (0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toCoreMessages)(messages),\n                tools: config.tools ? (0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toLanguageModelTools)(config.tools) : [],\n                ...config.callSettings,\n                ...config.config,\n                ...this.options.body\n            }),\n            signal: abortSignal\n        });\n        if (result.status !== 200) {\n            throw new Error(`Status ${result.status}: ${await result.text()}`);\n        }\n        const stream = result.body.pipeThrough(streamPartDecoderStream()).pipeThrough(assistantDecoderStream()).pipeThrough((0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toolResultStream)(config.tools, abortSignal)).pipeThrough((0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.runResultStream)());\n        let update;\n        for await (update of asAsyncIterable(stream)){\n            yield update;\n        }\n        if (update === void 0) throw new Error(\"No data received from Edge Runtime\");\n    }\n};\n// src/runtimes/edge/useEdgeRuntime.ts\nvar useEdgeRuntime = ({ initialMessages, maxToolRoundtrips, adapters, ...options })=>{\n    const [adapter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new EdgeChatAdapter(options));\n    return useLocalRuntime(adapter, {\n        initialMessages,\n        maxToolRoundtrips,\n        adapters\n    });\n};\n// src/runtimes/local/shouldContinue.tsx\nvar shouldContinue = (result)=>result.status?.type === \"requires-action\" && result.status.reason === \"tool-calls\" && result.content.every((c)=>c.type !== \"tool-call\" || !!c.result);\n// src/runtimes/local/LocalThreadRuntime.tsx\nvar LocalThreadRuntime = class {\n    constructor(configProvider, adapter, { initialMessages, ...options }){\n        this._subscriptions = /* @__PURE__ */ new Set();\n        this.abortController = null;\n        this.repository = new MessageRepository();\n        this.capabilities = {\n            switchToBranch: true,\n            edit: true,\n            reload: true,\n            cancel: true,\n            unstable_copy: true,\n            speak: false,\n            attachments: false\n        };\n        this.isDisabled = false;\n        this.composer = new ThreadRuntimeComposer(this, this.notifySubscribers.bind(this));\n        this.configProvider = configProvider;\n        this.adapter = adapter;\n        this.threadId = generateId();\n        this.options = options;\n        if (initialMessages) {\n            let parentId = null;\n            const messages = fromCoreMessages(initialMessages);\n            for (const message of messages){\n                this.repository.addOrUpdateMessage(parentId, message);\n                parentId = message.id;\n            }\n        }\n    }\n    get messages() {\n        return this.repository.getMessages();\n    }\n    get options() {\n        return this._options;\n    }\n    set options({ initialMessages, ...options }) {\n        this._options = options;\n        let hasUpdates = false;\n        const canSpeak = options.adapters?.speech !== void 0;\n        if (this.capabilities.speak !== canSpeak) {\n            this.capabilities.speak = canSpeak;\n            hasUpdates = true;\n        }\n        this.composer.setAttachmentAdapter(options.adapters?.attachments);\n        const canAttach = options.adapters?.attachments !== void 0;\n        if (this.capabilities.attachments !== canAttach) {\n            this.capabilities.attachments = canAttach;\n            hasUpdates = true;\n        }\n        if (hasUpdates) this.notifySubscribers();\n    }\n    getBranches(messageId) {\n        return this.repository.getBranches(messageId);\n    }\n    switchToBranch(branchId) {\n        this.repository.switchToBranch(branchId);\n        this.notifySubscribers();\n    }\n    async append(message) {\n        if (message.role !== \"user\") throw new Error(\"Only appending user messages are supported in LocalRuntime. This is likely an internal bug in assistant-ui.\");\n        const userMessageId = generateId();\n        const userMessage = {\n            id: userMessageId,\n            role: \"user\",\n            content: message.content,\n            attachments: message.attachments ?? [],\n            createdAt: /* @__PURE__ */ new Date()\n        };\n        this.repository.addOrUpdateMessage(message.parentId, userMessage);\n        await this.startRun(userMessageId);\n    }\n    async startRun(parentId) {\n        this.repository.resetHead(parentId);\n        const id = generateId();\n        let message = {\n            id,\n            role: \"assistant\",\n            status: {\n                type: \"running\"\n            },\n            content: [],\n            createdAt: /* @__PURE__ */ new Date()\n        };\n        do {\n            message = await this.performRoundtrip(parentId, message);\n        }while (shouldContinue(message));\n    }\n    async performRoundtrip(parentId, message) {\n        const messages = this.repository.getMessages();\n        this.abortController?.abort();\n        this.abortController = new AbortController();\n        const initialContent = message.content;\n        const initialRoundtrips = message.metadata?.roundtrips;\n        const initalCustom = message.metadata?.custom;\n        const updateMessage = (m)=>{\n            message = {\n                ...message,\n                ...m.content ? {\n                    content: [\n                        ...initialContent,\n                        ...m.content ?? []\n                    ]\n                } : void 0,\n                status: m.status ?? message.status,\n                // TODO deprecated, remove in v0.6\n                ...m.metadata?.roundtrips ? {\n                    roundtrips: [\n                        ...initialRoundtrips ?? [],\n                        ...m.metadata.roundtrips\n                    ]\n                } : void 0,\n                ...m.metadata ? {\n                    metadata: {\n                        ...message.metadata,\n                        ...m.metadata.roundtrips ? {\n                            roundtrips: [\n                                ...initialRoundtrips ?? [],\n                                ...m.metadata.roundtrips\n                            ]\n                        } : void 0,\n                        ...m.metadata?.custom ? {\n                            custom: {\n                                ...initalCustom ?? {},\n                                ...m.metadata.custom\n                            }\n                        } : void 0\n                    }\n                } : void 0\n            };\n            this.repository.addOrUpdateMessage(parentId, message);\n            this.notifySubscribers();\n        };\n        const maxToolRoundtrips = this.options.maxToolRoundtrips ?? 1;\n        const toolRoundtrips = message.metadata?.roundtrips?.length ?? 0;\n        if (toolRoundtrips > maxToolRoundtrips) {\n            updateMessage({\n                status: {\n                    type: \"incomplete\",\n                    reason: \"tool-calls\"\n                }\n            });\n            return message;\n        } else {\n            updateMessage({\n                status: {\n                    type: \"running\"\n                }\n            });\n        }\n        try {\n            const promiseOrGenerator = this.adapter.run({\n                messages,\n                abortSignal: this.abortController.signal,\n                config: this.configProvider.getModelConfig(),\n                onUpdate: updateMessage\n            });\n            if (Symbol.asyncIterator in promiseOrGenerator) {\n                for await (const r of promiseOrGenerator){\n                    updateMessage(r);\n                }\n            } else {\n                updateMessage(await promiseOrGenerator);\n            }\n            this.abortController = null;\n            if (message.status.type === \"running\") {\n                updateMessage({\n                    status: {\n                        type: \"complete\",\n                        reason: \"unknown\"\n                    }\n                });\n            }\n        } catch (e) {\n            this.abortController = null;\n            if (e instanceof Error && e.name === \"AbortError\") {\n                updateMessage({\n                    status: {\n                        type: \"incomplete\",\n                        reason: \"cancelled\"\n                    }\n                });\n            } else {\n                updateMessage({\n                    status: {\n                        type: \"incomplete\",\n                        reason: \"error\",\n                        error: e\n                    }\n                });\n                throw e;\n            }\n        }\n        return message;\n    }\n    cancelRun() {\n        if (!this.abortController) return;\n        this.abortController.abort();\n        this.abortController = null;\n    }\n    notifySubscribers() {\n        for (const callback of this._subscriptions)callback();\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        return ()=>this._subscriptions.delete(callback);\n    }\n    addToolResult({ messageId, toolCallId, result }) {\n        let { parentId, message } = this.repository.getMessage(messageId);\n        if (message.role !== \"assistant\") throw new Error(\"Tried to add tool result to non-assistant message\");\n        let added = false;\n        let found = false;\n        const newContent = message.content.map((c)=>{\n            if (c.type !== \"tool-call\") return c;\n            if (c.toolCallId !== toolCallId) return c;\n            found = true;\n            if (!c.result) added = true;\n            return {\n                ...c,\n                result\n            };\n        });\n        if (!found) throw new Error(\"Tried to add tool result to non-existing tool call\");\n        message = {\n            ...message,\n            content: newContent\n        };\n        this.repository.addOrUpdateMessage(parentId, message);\n        if (added && shouldContinue(message)) {\n            this.performRoundtrip(parentId, message);\n        }\n    }\n    speak(messageId) {\n        const adapter = this.options.adapters?.speech;\n        if (!adapter) throw new Error(\"Speech adapter not configured\");\n        const { message } = this.repository.getMessage(messageId);\n        if (this._utterance) {\n            this._utterance.cancel();\n            this._utterance = void 0;\n        }\n        const utterance = adapter.speak(message);\n        utterance.onEnd(()=>{\n            if (this._utterance === utterance) {\n                this._utterance = void 0;\n            }\n        });\n        this._utterance = utterance;\n        return this._utterance;\n    }\n    export() {\n        return this.repository.export();\n    }\n    import(data) {\n        this.repository.import(data);\n        this.notifySubscribers();\n    }\n};\n// src/runtimes/local/LocalRuntime.tsx\nvar LocalRuntime = class extends BaseAssistantRuntime {\n    constructor(adapter, options){\n        const proxyConfigProvider = new ProxyConfigProvider();\n        super(new LocalThreadRuntime(proxyConfigProvider, adapter, options));\n        this._proxyConfigProvider = proxyConfigProvider;\n    }\n    set adapter(adapter) {\n        this.thread.adapter = adapter;\n    }\n    set options(options) {\n        this.thread.options = options;\n    }\n    registerModelConfigProvider(provider) {\n        return this._proxyConfigProvider.registerModelConfigProvider(provider);\n    }\n    switchToThread(threadId) {\n        if (threadId) {\n            throw new Error(\"LocalRuntime does not yet support switching threads\");\n        }\n        const { initialMessages, ...options } = this.thread.options;\n        return this.thread = new LocalThreadRuntime(this._proxyConfigProvider, this.thread.adapter, options);\n    }\n    reset({ initialMessages } = {}) {\n        this.switchToThread(null);\n        if (!initialMessages) return;\n        const messages = fromCoreMessages(initialMessages);\n        this.thread.import({\n            messages: messages.map((m, idx)=>({\n                    parentId: messages[idx - 1]?.id ?? null,\n                    message: m\n                }))\n        });\n    }\n};\n// src/runtimes/local/useLocalRuntime.tsx\nvar useLocalRuntime = (adapter, options = {})=>{\n    const [runtime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new LocalRuntime(adapter, options));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>{\n        runtime.adapter = adapter;\n        runtime.options = options;\n    });\n    return runtime;\n};\n// src/runtimes/external-store/getExternalStoreMessage.tsx\nvar symbolInnerMessage = Symbol(\"innerMessage\");\nvar getExternalStoreMessage = (message)=>{\n    return message[symbolInnerMessage];\n};\n// src/runtimes/external-store/ThreadMessageConverter.ts\nvar ThreadMessageConverter = class {\n    convertMessages(messages, converter) {\n        return messages.map((m, idx)=>{\n            const cached = this.cache.get(m);\n            const newMessage = converter(cached, m, idx);\n            this.cache.set(m, newMessage);\n            return newMessage;\n        });\n    }\n    constructor(){\n        this.cache = /* @__PURE__ */ new WeakMap();\n    }\n};\n// src/runtimes/external-store/auto-status.tsx\nvar AUTO_STATUS_RUNNING = Object.freeze({\n    type: \"running\"\n});\nvar AUTO_STATUS_COMPLETE = Object.freeze({\n    type: \"complete\",\n    reason: \"unknown\"\n});\nvar isAutoStatus = (status)=>status === AUTO_STATUS_RUNNING || status === AUTO_STATUS_COMPLETE;\nvar getAutoStatus = (isLast, isRunning)=>isLast && isRunning ? AUTO_STATUS_RUNNING : AUTO_STATUS_COMPLETE;\n// src/runtimes/external-store/ThreadMessageLike.tsx\nvar fromThreadMessageLike = (like, fallbackId, fallbackStatus)=>{\n    const { role, id, createdAt, attachments, status } = like;\n    const common = {\n        id: id ?? fallbackId,\n        createdAt: createdAt ?? /* @__PURE__ */ new Date()\n    };\n    const content = typeof like.content === \"string\" ? [\n        {\n            type: \"text\",\n            text: like.content\n        }\n    ] : like.content;\n    if (role !== \"user\" && attachments) throw new Error(\"Attachments are only supported for user messages\");\n    switch(role){\n        case \"assistant\":\n            return {\n                ...common,\n                role,\n                content: content.map((part)=>{\n                    const type = part.type;\n                    switch(type){\n                        case \"text\":\n                            if (part.text.trim().length === 0) return null;\n                            return part;\n                        case \"ui\":\n                            return part;\n                        case \"tool-call\":\n                            {\n                                if (\"argsText\" in part) return part;\n                                return {\n                                    ...part,\n                                    argsText: JSON.stringify(part.args)\n                                };\n                            }\n                        default:\n                            {\n                                const unhandledType = type;\n                                throw new Error(`Unknown content part type: ${unhandledType}`);\n                            }\n                    }\n                }).filter((c)=>!!c),\n                status: status ?? fallbackStatus\n            };\n        case \"user\":\n            return {\n                ...common,\n                role,\n                content: content.map((part)=>{\n                    const type = part.type;\n                    switch(type){\n                        case \"text\":\n                        case \"ui\":\n                        case \"image\":\n                            return part;\n                        default:\n                            {\n                                const unhandledType = type;\n                                throw new Error(`Unknown content part type: ${unhandledType}`);\n                            }\n                    }\n                }),\n                attachments: attachments ?? []\n            };\n        case \"system\":\n            if (content.length !== 1 || content[0].type !== \"text\") throw new Error(\"System messages must have exactly one text content part.\");\n            return {\n                ...common,\n                role,\n                content\n            };\n        default:\n            {\n                const unsupportedRole = role;\n                throw new Error(`Unknown message role: ${unsupportedRole}`);\n            }\n    }\n};\n// src/utils/getThreadMessageText.tsx\nvar getThreadMessageText = (message)=>{\n    const textParts = message.content.filter((part)=>part.type === \"text\");\n    return textParts.map((part)=>part.text).join(\"\\n\\n\");\n};\n// src/runtimes/external-store/ExternalStoreThreadRuntime.tsx\nvar hasUpcomingMessage = (isRunning, messages)=>{\n    return isRunning && messages[messages.length - 1]?.role !== \"assistant\";\n};\nvar ExternalStoreThreadRuntime = class {\n    get capabilities() {\n        return this._capabilities;\n    }\n    constructor(store){\n        this._subscriptions = /* @__PURE__ */ new Set();\n        this.repository = new MessageRepository();\n        this.assistantOptimisticId = null;\n        this._capabilities = {\n            switchToBranch: false,\n            edit: false,\n            reload: false,\n            cancel: false,\n            unstable_copy: false,\n            speak: false,\n            attachments: false\n        };\n        this.converter = new ThreadMessageConverter();\n        this.composer = new ThreadRuntimeComposer(this, this.notifySubscribers.bind(this));\n        this.updateMessages = (messages)=>{\n            this._store.setMessages?.(messages.flatMap(getExternalStoreMessage).filter((m)=>m != null));\n        };\n        this.store = store;\n    }\n    get store() {\n        return this._store;\n    }\n    set store(store) {\n        if (this._store === store) return;\n        this.threadId = store.threadId ?? this.threadId ?? generateId();\n        const isRunning = store.isRunning ?? false;\n        this.isDisabled = store.isDisabled ?? false;\n        const oldStore = this._store;\n        this._store = store;\n        this._capabilities = {\n            switchToBranch: this._store.setMessages !== void 0,\n            edit: this._store.onEdit !== void 0,\n            reload: this._store.onReload !== void 0,\n            cancel: this._store.onCancel !== void 0,\n            speak: this._store.onSpeak !== void 0,\n            unstable_copy: this._store.unstable_capabilities?.copy !== false,\n            // default true\n            attachments: !!this.store.adapters?.attachments\n        };\n        this.composer.setAttachmentAdapter(this._store.adapters?.attachments);\n        if (oldStore) {\n            if (oldStore.convertMessage !== store.convertMessage) {\n                this.converter = new ThreadMessageConverter();\n            } else if (oldStore.isRunning === store.isRunning && oldStore.messages === store.messages) {\n                this.notifySubscribers();\n                return;\n            }\n        }\n        const messages = !store.convertMessage ? store.messages : this.converter.convertMessages(store.messages, (cache, m, idx)=>{\n            if (!store.convertMessage) return m;\n            const isLast = idx === store.messages.length - 1;\n            const autoStatus = getAutoStatus(isLast, isRunning);\n            if (cache && (cache.role !== \"assistant\" || !isAutoStatus(cache.status) || cache.status === autoStatus)) return cache;\n            const newMessage = fromThreadMessageLike(store.convertMessage(m, idx), idx.toString(), autoStatus);\n            newMessage[symbolInnerMessage] = m;\n            return newMessage;\n        });\n        for(let i = 0; i < messages.length; i++){\n            const message = messages[i];\n            const parent = messages[i - 1];\n            this.repository.addOrUpdateMessage(parent?.id ?? null, message);\n        }\n        if (this.assistantOptimisticId) {\n            this.repository.deleteMessage(this.assistantOptimisticId);\n            this.assistantOptimisticId = null;\n        }\n        if (hasUpcomingMessage(isRunning, messages)) {\n            this.assistantOptimisticId = this.repository.appendOptimisticMessage(messages.at(-1)?.id ?? null, {\n                role: \"assistant\",\n                content: []\n            });\n        }\n        this.repository.resetHead(this.assistantOptimisticId ?? messages.at(-1)?.id ?? null);\n        this.messages = this.repository.getMessages();\n        this.notifySubscribers();\n    }\n    notifySubscribers() {\n        for (const callback of this._subscriptions)callback();\n    }\n    getBranches(messageId) {\n        return this.repository.getBranches(messageId);\n    }\n    switchToBranch(branchId) {\n        if (!this._store.setMessages) throw new Error(\"Runtime does not support switching branches.\");\n        this.repository.switchToBranch(branchId);\n        this.updateMessages(this.repository.getMessages());\n    }\n    async append(message) {\n        if (message.parentId !== (this.messages.at(-1)?.id ?? null)) {\n            if (!this._store.onEdit) throw new Error(\"Runtime does not support editing messages.\");\n            await this._store.onEdit(message);\n        } else {\n            await this._store.onNew(message);\n        }\n    }\n    async startRun(parentId) {\n        if (!this._store.onReload) throw new Error(\"Runtime does not support reloading messages.\");\n        await this._store.onReload(parentId);\n    }\n    cancelRun() {\n        if (!this._store.onCancel) throw new Error(\"Runtime does not support cancelling runs.\");\n        this._store.onCancel();\n        if (this.assistantOptimisticId) {\n            this.repository.deleteMessage(this.assistantOptimisticId);\n            this.assistantOptimisticId = null;\n        }\n        let messages = this.repository.getMessages();\n        const previousMessage = messages[messages.length - 1];\n        if (previousMessage?.role === \"user\" && previousMessage.id === messages.at(-1)?.id) {\n            this.repository.deleteMessage(previousMessage.id);\n            if (!this.composer.text.trim()) {\n                this.composer.setText(getThreadMessageText(previousMessage));\n            }\n            messages = this.repository.getMessages();\n        } else {\n            this.notifySubscribers();\n        }\n        setTimeout(()=>{\n            this.updateMessages(messages);\n        }, 0);\n    }\n    addToolResult(options) {\n        if (!this._store.onAddToolResult) throw new Error(\"Runtime does not support tool results.\");\n        this._store.onAddToolResult(options);\n    }\n    speak(messageId) {\n        if (!this._store.onSpeak) throw new Error(\"Runtime does not support speaking.\");\n        const { message } = this.repository.getMessage(messageId);\n        return this._store.onSpeak(message);\n    }\n    subscribe(callback) {\n        this._subscriptions.add(callback);\n        return ()=>this._subscriptions.delete(callback);\n    }\n};\n// src/runtimes/external-store/ExternalStoreRuntime.tsx\nvar ExternalStoreRuntime = class extends BaseAssistantRuntime {\n    constructor(store){\n        super(new ExternalStoreThreadRuntime(store));\n        this._proxyConfigProvider = new ProxyConfigProvider();\n    }\n    get store() {\n        return this.thread.store;\n    }\n    set store(store) {\n        this.thread.store = store;\n    }\n    getModelConfig() {\n        return this._proxyConfigProvider.getModelConfig();\n    }\n    registerModelConfigProvider(provider) {\n        return this._proxyConfigProvider.registerModelConfigProvider(provider);\n    }\n    async switchToThread(threadId) {\n        if (threadId) {\n            if (!this.store.onSwitchThread) throw new Error(\"Runtime does not support switching threads.\");\n            this.thread = new ExternalStoreThreadRuntime({\n                messages: [],\n                onNew: this.store.onNew\n            });\n            this.store.onSwitchThread(threadId);\n        } else {\n            if (!this.store.onNewThread) throw new Error(\"Runtime does not support switching to new threads.\");\n            this.thread = new ExternalStoreThreadRuntime({\n                messages: [],\n                onNew: this.store.onNew\n            });\n            await this.store.onNewThread();\n        }\n    }\n};\n// src/runtimes/external-store/useExternalStoreRuntime.tsx\n\nvar useExternalStoreRuntime = (store)=>{\n    const [runtime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new ExternalStoreRuntime(store));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        runtime.store = store;\n    });\n    return runtime;\n};\n// src/runtimes/external-store/external-message-converter.tsx\n\nvar joinExternalMessages = (messages)=>{\n    const assistantMessage = {\n        role: \"assistant\",\n        content: []\n    };\n    for (const output of messages){\n        if (output.role === \"tool\") {\n            const toolCallIdx = assistantMessage.content.findIndex((c)=>c.type === \"tool-call\" && c.toolCallId === output.toolCallId);\n            if (toolCallIdx !== -1) {\n                const toolCall = assistantMessage.content[toolCallIdx];\n                if (output.toolName) {\n                    if (toolCall.toolName !== output.toolName) throw new Error(`Tool call name ${output.toolCallId} ${output.toolName} does not match existing tool call ${toolCall.toolName}`);\n                }\n                assistantMessage.content[toolCallIdx] = {\n                    ...toolCall,\n                    result: output.result\n                };\n            } else {\n                throw new Error(`Tool call ${output.toolCallId} ${output.toolName} not found in assistant message`);\n            }\n        } else {\n            const content = output.content;\n            const role = output.role;\n            switch(role){\n                case \"system\":\n                case \"user\":\n                    return {\n                        role,\n                        content\n                    };\n                case \"assistant\":\n                    if (assistantMessage.content.length === 0) {\n                        assistantMessage.id = output.id;\n                        assistantMessage.createdAt ??= output.createdAt;\n                        assistantMessage.status ??= output.status;\n                    }\n                    assistantMessage.content.push(...content);\n                    break;\n                default:\n                    {\n                        const unsupportedRole = role;\n                        throw new Error(`Unknown message role: ${unsupportedRole}`);\n                    }\n            }\n        }\n    }\n    return assistantMessage;\n};\nvar chunkExternalMessages = (callbackResults)=>{\n    const results = [];\n    let isAssistant = false;\n    let inputs = [];\n    let outputs = [];\n    const flush = ()=>{\n        if (outputs.length) {\n            results.push({\n                inputs,\n                outputs\n            });\n        }\n        inputs = [];\n        outputs = [];\n    };\n    for (const callbackResult of callbackResults){\n        for (const output of callbackResult.outputs){\n            if (!isAssistant || output.role === \"user\" || output.role === \"system\") {\n                flush();\n            }\n            isAssistant = output.role === \"assistant\" || output.role === \"tool\";\n            if (inputs.at(-1) !== callbackResult.input) {\n                inputs.push(callbackResult.input);\n            }\n            outputs.push(output);\n        }\n    }\n    flush();\n    return results;\n};\nvar useExternalMessageConverter = ({ callback, messages, isRunning })=>{\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            callback,\n            callbackCache: /* @__PURE__ */ new WeakMap(),\n            chunkCache: /* @__PURE__ */ new WeakMap(),\n            converterCache: new ThreadMessageConverter()\n        }), [\n        callback\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const callbackResults = [];\n        for (const message of messages){\n            let result = state.callbackCache.get(message);\n            if (!result) {\n                const output = state.callback(message);\n                const outputs = Array.isArray(output) ? output : [\n                    output\n                ];\n                result = {\n                    input: message,\n                    outputs\n                };\n                state.callbackCache.set(message, result);\n            }\n            callbackResults.push(result);\n        }\n        const chunks = chunkExternalMessages(callbackResults).map((m)=>{\n            const key = m.outputs[0];\n            if (!key) return m;\n            const cached = state.chunkCache.get(key);\n            if (cached && shallowArrayEqual(cached.outputs, m.outputs)) return cached;\n            state.chunkCache.set(key, m);\n            return m;\n        });\n        return state.converterCache.convertMessages(chunks, (cache, message, idx)=>{\n            const isLast = idx === chunks.length - 1;\n            const autoStatus = getAutoStatus(isLast, isRunning);\n            if (cache && (cache.role !== \"assistant\" || !isAutoStatus(cache.status) || cache.status === autoStatus)) {\n                const inputs = getExternalStoreMessage(cache);\n                if (shallowArrayEqual(inputs, message.inputs)) {\n                    return cache;\n                }\n            }\n            const newMessage = fromThreadMessageLike(joinExternalMessages(message.outputs), idx.toString(), autoStatus);\n            newMessage[symbolInnerMessage] = message.inputs;\n            return newMessage;\n        });\n    }, [\n        state,\n        messages,\n        isRunning\n    ]);\n};\nvar shallowArrayEqual = (a, b)=>{\n    if (a.length !== b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n};\n// src/runtimes/dangerous-in-browser/useDangerousInBrowserRuntime.ts\n\n// src/runtimes/dangerous-in-browser/DangerousInBrowserAdapter.ts\nvar DangerousInBrowserAdapter = class {\n    constructor(options){\n        this.options = options;\n    }\n    async *run({ messages, abortSignal, config }) {\n        const res = await (0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.getEdgeRuntimeStream)({\n            options: this.options,\n            abortSignal,\n            requestData: {\n                system: config.system,\n                messages: (0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toCoreMessages)(messages),\n                tools: config.tools ? (0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toLanguageModelTools)(config.tools) : [],\n                ...config.callSettings,\n                ...config.config\n            }\n        });\n        const stream = res.pipeThrough((0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.toolResultStream)(config.tools, abortSignal)).pipeThrough((0,_chunk_ZQNZLTZL_mjs__WEBPACK_IMPORTED_MODULE_1__.runResultStream)());\n        for await (const update of asAsyncIterable(stream)){\n            yield update;\n        }\n    }\n};\n// src/runtimes/dangerous-in-browser/useDangerousInBrowserRuntime.ts\nvar useDangerousInBrowserRuntime = ({ initialMessages, ...options })=>{\n    const [adapter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new DangerousInBrowserAdapter(options));\n    return useLocalRuntime(adapter, {\n        initialMessages\n    });\n};\n// src/runtimes/speech/WebSpeechSynthesisAdapter.ts\nvar WebSpeechSynthesisAdapter = class {\n    speak(message) {\n        const text = getThreadMessageText(message);\n        const utterance = new SpeechSynthesisUtterance(text);\n        const endHandlers = /* @__PURE__ */ new Set();\n        const handleEnd = (reason, error)=>{\n            if (res.status.type === \"ended\") return;\n            res.status = {\n                type: \"ended\",\n                reason,\n                error\n            };\n            endHandlers.forEach((handler)=>handler());\n        };\n        utterance.addEventListener(\"end\", ()=>handleEnd(\"finished\"));\n        utterance.addEventListener(\"error\", (e)=>handleEnd(\"error\", e.error));\n        window.speechSynthesis.speak(utterance);\n        const res = {\n            status: {\n                type: \"running\"\n            },\n            cancel: ()=>{\n                window.speechSynthesis.cancel();\n                handleEnd(\"cancelled\");\n            },\n            onEnd: (callback)=>{\n                if (res.status.type === \"ended\") {\n                    let cancelled = false;\n                    queueMicrotask(()=>{\n                        if (!cancelled) callback();\n                    });\n                    return ()=>{\n                        cancelled = true;\n                    };\n                } else {\n                    endHandlers.add(callback);\n                    return ()=>{\n                        endHandlers.delete(callback);\n                    };\n                }\n            }\n        };\n        return res;\n    }\n};\n// src/runtimes/attachment/SimpleImageAttachmentAdapter.ts\nvar SimpleImageAttachmentAdapter = class {\n    async add(state) {\n        return {\n            id: state.file.name,\n            type: \"image\",\n            name: state.file.name,\n            file: state.file\n        };\n    }\n    async send(attachment) {\n        return {\n            ...attachment,\n            content: [\n                {\n                    type: \"image\",\n                    image: await getFileDataURL(attachment.file)\n                }\n            ]\n        };\n    }\n    async remove() {}\n    constructor(){\n        this.accept = \"image/*\";\n    }\n};\nvar getFileDataURL = (file)=>new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = ()=>resolve(reader.result);\n        reader.onerror = (error)=>reject(error);\n        reader.readAsDataURL(file);\n    });\n// src/runtimes/attachment/SimpleTextAttachmentAdapter.ts\nvar SimpleTextAttachmentAdapter = class {\n    async add(state) {\n        return {\n            id: state.file.name,\n            type: \"document\",\n            name: state.file.name,\n            file: state.file\n        };\n    }\n    async send(attachment) {\n        return {\n            ...attachment,\n            content: [\n                {\n                    type: \"text\",\n                    text: `<attachment name=${attachment.name}>\n${await getFileText(attachment.file)}\n</attachment>`\n                }\n            ]\n        };\n    }\n    async remove() {}\n    constructor(){\n        this.accept = \"text/plain,text/html,text/markdown,text/csv,text/xml,text/json,text/css\";\n    }\n};\nvar getFileText = (file)=>new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = ()=>resolve(reader.result);\n        reader.onerror = (error)=>reject(error);\n        reader.readAsText(file);\n    });\n// src/runtimes/attachment/CompositeAttachmentAdapter.ts\nfunction fileMatchesAccept(file, acceptString) {\n    if (acceptString === \"*\") {\n        return true;\n    }\n    const allowedTypes = acceptString.split(\",\").map((type)=>type.trim().toLowerCase());\n    const fileExtension = \".\" + file.name.split(\".\").pop().toLowerCase();\n    const fileMimeType = file.type.toLowerCase();\n    for (const type of allowedTypes){\n        if (type.startsWith(\".\") && type === fileExtension) {\n            return true;\n        }\n        if (type.includes(\"/\") && type === fileMimeType) {\n            return true;\n        }\n        if (type === \"image/*\" || type === \"video/*\" || type === \"audio/*\") {\n            if (type.endsWith(\"/*\")) {\n                const generalType = type.split(\"/\")[0];\n                if (fileMimeType.startsWith(generalType + \"/\")) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nvar CompositeAttachmentAdapter = class {\n    constructor(adapters){\n        this._adapters = adapters;\n        const wildcardIdx = adapters.findIndex((a)=>a.accept === \"*\");\n        if (wildcardIdx !== -1) {\n            if (wildcardIdx !== adapters.length - 1) throw new Error(\"A wildcard adapter (handling all files) can only be specified as the last adapter.\");\n            this.accept = \"*\";\n        } else {\n            this.accept = adapters.map((a)=>a.accept).join(\",\");\n        }\n    }\n    async add(state) {\n        for (const adapter of this._adapters){\n            if (fileMatchesAccept(state.file, adapter.accept)) {\n                return adapter.add(state);\n            }\n        }\n        throw new Error(\"No matching adapter found for file\");\n    }\n    async send(attachment) {\n        const adapters = this._adapters.slice();\n        for (const adapter of adapters){\n            if (fileMatchesAccept(attachment.file, adapter.accept)) {\n                return adapter.send(attachment);\n            }\n        }\n        throw new Error(\"No matching adapter found for attachment\");\n    }\n    async remove(attachment) {\n        const adapters = this._adapters.slice();\n        for (const adapter of adapters){\n            if (fileMatchesAccept(attachment.file, adapter.accept)) {\n                return adapter.remove(attachment);\n            }\n        }\n        throw new Error(\"No matching adapter found for attachment\");\n    }\n};\n// src/context/ReadonlyStore.ts\nvar writableStore = (store)=>{\n    return store;\n};\n// src/context/providers/ThreadProvider.tsx\n\nvar ThreadProvider = ({ children, provider })=>{\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useThreadRuntime = makeThreadRuntimeStore(provider.thread);\n        const useThread = makeThreadStore(useThreadRuntime);\n        const useThreadMessages = makeThreadMessagesStore(useThreadRuntime);\n        const useThreadActions = makeThreadActionStore(useThreadRuntime);\n        const useViewport = makeThreadViewportStore();\n        const useComposer = makeComposerStore(useThreadRuntime);\n        return {\n            useThread,\n            useThreadRuntime,\n            useThreadMessages,\n            useThreadActions,\n            useComposer,\n            useViewport\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const onThreadUpdate = ()=>{\n            const thread = provider.thread;\n            const oldState = context.useThread.getState();\n            const state = getThreadStateFromRuntime(thread);\n            if (oldState.threadId !== state.threadId || oldState.isDisabled !== state.isDisabled || oldState.isRunning !== state.isRunning || // TODO ensure capabilities is memoized\n            oldState.capabilities !== state.capabilities) {\n                writableStore(context.useThread).setState(state, true);\n            }\n            if (thread.messages !== context.useThreadMessages.getState()) {\n                writableStore(context.useThreadMessages).setState(thread.messages, true);\n            }\n            const composerState = context.useComposer.getState();\n            if (thread.composer.isEmpty !== composerState.isEmpty || thread.composer.text !== composerState.text || thread.composer.attachments !== composerState.attachments || state.capabilities.cancel !== composerState.canCancel) {\n                writableStore(context.useComposer).setState({\n                    isEmpty: thread.composer.isEmpty,\n                    text: thread.composer.text,\n                    attachments: thread.composer.attachments,\n                    canCancel: state.capabilities.cancel\n                });\n            }\n        };\n        onThreadUpdate();\n        return subscribeToMainThread(provider, onThreadUpdate);\n    }, [\n        provider,\n        context\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>provider.subscribe(()=>{\n            writableStore(context.useThreadRuntime).setState(provider.thread, true);\n        }), [\n        provider,\n        context\n    ]);\n    const Synchronizer = context.useThreadRuntime((t)=>t.unstable_synchronizer);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ThreadContext.Provider, {\n        value: context,\n        children: [\n            Synchronizer && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Synchronizer, {}),\n            children\n        ]\n    });\n};\n// src/context/stores/AssistantActions.tsx\n\nvar makeAssistantActionsStore = (runtimeRef)=>(0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>Object.freeze({\n            switchToThread: ()=>runtimeRef.current.switchToThread(null),\n            getRuntime: ()=>runtimeRef.current\n        }));\n// src/context/stores/AssistantRuntime.tsx\n\nvar makeAssistantRuntimeStore = (runtime)=>{\n    return (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>runtime);\n};\n// src/context/providers/AssistantProvider.tsx\n\nvar AssistantProvider = ({ children, runtime })=>{\n    const runtimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(runtime);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>{\n        runtimeRef.current = runtime;\n    });\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useAssistantRuntime = makeAssistantRuntimeStore(runtime);\n        const useModelConfig = makeAssistantModelConfigStore();\n        const useToolUIs = makeAssistantToolUIsStore();\n        const useAssistantActions = makeAssistantActionsStore(runtimeRef);\n        return {\n            useModelConfig,\n            useToolUIs,\n            useAssistantRuntime,\n            useAssistantActions\n        };\n    });\n    const getModelConfig = context.useModelConfig();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return runtime.registerModelConfigProvider(getModelConfig);\n    }, [\n        runtime,\n        getModelConfig\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>writableStore(context.useAssistantRuntime).setState(runtime, true), [\n        runtime,\n        context\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantContext.Provider, {\n        value: context,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadProvider, {\n            provider: runtime,\n            children\n        })\n    });\n};\n// src/context/providers/AssistantRuntimeProvider.tsx\n\nvar AssistantRuntimeProviderImpl = ({ children, runtime })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantProvider, {\n        runtime,\n        children\n    });\n};\nvar AssistantRuntimeProvider = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(AssistantRuntimeProviderImpl);\n// src/context/react/ComposerContext.ts\n\n// src/context/react/MessageContext.ts\n\nvar MessageContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useMessageContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MessageContext);\n    if (!options?.optional && !context) throw new Error(\"This component can only be used inside a component passed to <ThreadPrimitive.Messages components={...} />.\");\n    return context;\n}\n// src/context/react/ComposerContext.ts\nvar useComposerContext = ()=>{\n    const { useComposer } = useThreadContext();\n    const { useEditComposer } = useMessageContext({\n        optional: true\n    }) ?? {};\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            useComposer: useEditComposer ?? useComposer,\n            type: useEditComposer ? \"edit\" : \"new\"\n        }), [\n        useEditComposer,\n        useComposer\n    ]);\n};\n// src/context/react/ContentPartContext.ts\n\nvar ContentPartContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useContentPartContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ContentPartContext);\n    if (!options?.optional && !context) throw new Error(\"This component can only be used inside a component passed to <MessagePrimitive.Content components={...} >.\");\n    return context;\n}\n// src/hooks/useAppendMessage.tsx\n\nvar toAppendMessage = (useThreadMessages, message)=>{\n    if (typeof message === \"string\") {\n        return {\n            parentId: useThreadMessages.getState().at(-1)?.id ?? null,\n            role: \"user\",\n            content: [\n                {\n                    type: \"text\",\n                    text: message\n                }\n            ],\n            attachments: []\n        };\n    }\n    return {\n        parentId: message.parentId ?? useThreadMessages.getState().at(-1)?.id ?? null,\n        role: message.role ?? \"user\",\n        content: message.content,\n        attachments: message.attachments ?? []\n    };\n};\nvar useAppendMessage = ()=>{\n    const { useThreadMessages, useThreadActions, useViewport, useComposer } = useThreadContext();\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((message)=>{\n        const appendMessage = toAppendMessage(useThreadMessages, message);\n        useThreadActions.getState().append(appendMessage);\n        useViewport.getState().scrollToBottom();\n        useComposer.getState().focus();\n    }, [\n        useThreadMessages,\n        useThreadActions,\n        useViewport,\n        useComposer\n    ]);\n    return append;\n};\n// src/hooks/useSwitchToNewThread.tsx\n\nvar useSwitchToNewThread = ()=>{\n    const { useAssistantActions } = useAssistantContext();\n    const { useComposer } = useThreadContext();\n    const switchToNewThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        useAssistantActions.getState().switchToThread(null);\n        useComposer.getState().focus();\n    }, [\n        useAssistantActions,\n        useComposer\n    ]);\n    return switchToNewThread;\n};\n// src/model-config/useAssistantTool.tsx\n\nvar useAssistantTool = (tool)=>{\n    const { useModelConfig, useToolUIs } = useAssistantContext();\n    const registerModelConfigProvider = useModelConfig((s)=>s.registerModelConfigProvider);\n    const setToolUI = useToolUIs((s)=>s.setToolUI);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const { toolName, render, ...rest } = tool;\n        const config = {\n            tools: {\n                [tool.toolName]: rest\n            }\n        };\n        const unsub1 = registerModelConfigProvider({\n            getModelConfig: ()=>config\n        });\n        const unsub2 = render ? setToolUI(toolName, render) : void 0;\n        return ()=>{\n            unsub1();\n            unsub2?.();\n        };\n    }, [\n        registerModelConfigProvider,\n        setToolUI,\n        tool\n    ]);\n};\n// src/model-config/makeAssistantTool.tsx\nvar makeAssistantTool = (tool)=>{\n    const Tool = ()=>{\n        useAssistantTool(tool);\n        return null;\n    };\n    Tool.unstable_tool = tool;\n    return Tool;\n};\n// src/model-config/useAssistantToolUI.tsx\n\nvar useAssistantToolUI = (tool)=>{\n    const { useToolUIs } = useAssistantContext();\n    const setToolUI = useToolUIs((s)=>s.setToolUI);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!tool) return;\n        const { toolName, render } = tool;\n        return setToolUI(toolName, render);\n    }, [\n        setToolUI,\n        tool\n    ]);\n};\n// src/model-config/makeAssistantToolUI.tsx\nvar makeAssistantToolUI = (tool)=>{\n    const ToolUI = ()=>{\n        useAssistantToolUI(tool);\n        return null;\n    };\n    ToolUI.unstable_tool = tool;\n    return ToolUI;\n};\n// src/model-config/useAssistantInstructions.tsx\n\nvar useAssistantInstructions = (instruction)=>{\n    const { useModelConfig } = useAssistantContext();\n    const registerModelConfigProvider = useModelConfig((s)=>s.registerModelConfigProvider);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const config = {\n            system: instruction\n        };\n        return registerModelConfigProvider({\n            getModelConfig: ()=>config\n        });\n    }, [\n        registerModelConfigProvider,\n        instruction\n    ]);\n};\n// src/primitive-hooks/actionBar/useActionBarCopy.tsx\n\n// src/utils/combined/useCombinedStore.ts\n\n// src/utils/combined/createCombinedStore.ts\n\nvar createCombinedStore = (stores)=>{\n    const subscribe = (callback)=>{\n        const unsubscribes = stores.map((store)=>store.subscribe(callback));\n        return ()=>{\n            for (const unsub of unsubscribes){\n                unsub();\n            }\n        };\n    };\n    return (selector)=>{\n        const getSnapshot = ()=>selector(...stores.map((store)=>store.getState()));\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);\n    };\n};\n// src/utils/combined/useCombinedStore.ts\nvar useCombinedStore = (stores, selector)=>{\n    const useCombined = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>createCombinedStore(stores), stores);\n    return useCombined(selector);\n};\n// src/primitive-hooks/actionBar/useActionBarCopy.tsx\nvar useActionBarCopy = ({ copiedDuration = 3e3 } = {})=>{\n    const { useMessage, useMessageUtils, useEditComposer } = useMessageContext();\n    const hasCopyableContent = useCombinedStore([\n        useMessage,\n        useEditComposer\n    ], ({ message }, c)=>{\n        return !c.isEditing && (message.role !== \"assistant\" || message.status.type !== \"running\") && message.content.some((c2)=>c2.type === \"text\" && c2.text.length > 0);\n    });\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { message } = useMessage.getState();\n        const { setIsCopied } = useMessageUtils.getState();\n        const { isEditing, text: composerValue } = useEditComposer.getState();\n        const valueToCopy = isEditing ? composerValue : getThreadMessageText(message);\n        navigator.clipboard.writeText(valueToCopy).then(()=>{\n            setIsCopied(true);\n            setTimeout(()=>setIsCopied(false), copiedDuration);\n        });\n    }, [\n        useMessage,\n        useMessageUtils,\n        useEditComposer,\n        copiedDuration\n    ]);\n    if (!hasCopyableContent) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarEdit.tsx\n\nvar useActionBarEdit = ()=>{\n    const { useMessage, useEditComposer } = useMessageContext();\n    const disabled = useCombinedStore([\n        useMessage,\n        useEditComposer\n    ], (m, c)=>m.message.role !== \"user\" || c.isEditing);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { edit } = useEditComposer.getState();\n        edit();\n    }, [\n        useEditComposer\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarReload.tsx\n\nvar useActionBarReload = ()=>{\n    const { useThread, useThreadActions, useComposer, useViewport } = useThreadContext();\n    const { useMessage } = useMessageContext();\n    const disabled = useCombinedStore([\n        useThread,\n        useMessage\n    ], (t, m)=>t.isRunning || t.isDisabled || m.message.role !== \"assistant\");\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { parentId } = useMessage.getState();\n        useThreadActions.getState().startRun(parentId);\n        useViewport.getState().scrollToBottom();\n        useComposer.getState().focus();\n    }, [\n        useThreadActions,\n        useComposer,\n        useViewport,\n        useMessage\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarSpeak.tsx\n\nvar useActionBarSpeak = ()=>{\n    const { useThreadActions } = useThreadContext();\n    const { useMessage, useEditComposer, useMessageUtils } = useMessageContext();\n    const hasSpeakableContent = useCombinedStore([\n        useMessage,\n        useEditComposer\n    ], ({ message }, c)=>{\n        return !c.isEditing && (message.role !== \"assistant\" || message.status.type !== \"running\") && message.content.some((c2)=>c2.type === \"text\" && c2.text.length > 0);\n    });\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        const { message } = useMessage.getState();\n        const utt = useThreadActions.getState().speak(message.id);\n        useMessageUtils.getState().addUtterance(utt);\n    }, [\n        useThreadActions,\n        useMessage,\n        useMessageUtils\n    ]);\n    if (!hasSpeakableContent) return null;\n    return callback;\n};\n// src/primitive-hooks/actionBar/useActionBarStopSpeaking.tsx\n\nvar useActionBarStopSpeaking = ()=>{\n    const { useMessageUtils } = useMessageContext();\n    const isSpeaking = useMessageUtils((u)=>u.isSpeaking);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        useMessageUtils.getState().stopSpeaking();\n    }, [\n        useMessageUtils\n    ]);\n    if (!isSpeaking) return null;\n    return callback;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerCount.tsx\nvar useBranchPickerCount = ()=>{\n    const { useMessage } = useMessageContext();\n    const branchCount = useMessage((s)=>s.branches.length);\n    return branchCount;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerNext.tsx\n\nvar useBranchPickerNext = ()=>{\n    const { useThreadActions } = useThreadContext();\n    const { useMessage, useEditComposer } = useMessageContext();\n    const disabled = useCombinedStore([\n        useMessage,\n        useEditComposer\n    ], (m, c)=>c.isEditing || m.branches.indexOf(m.message.id) + 1 >= m.branches.length);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { message, branches } = useMessage.getState();\n        useThreadActions.getState().switchToBranch(branches[branches.indexOf(message.id) + 1]);\n    }, [\n        useThreadActions,\n        useMessage\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerNumber.tsx\nvar useBranchPickerNumber = ()=>{\n    const { useMessage } = useMessageContext();\n    const branchIdx = useMessage((s)=>s.branches.indexOf(s.message.id));\n    return branchIdx + 1;\n};\n// src/primitive-hooks/branchPicker/useBranchPickerPrevious.tsx\n\nvar useBranchPickerPrevious = ()=>{\n    const { useThreadActions } = useThreadContext();\n    const { useMessage, useEditComposer } = useMessageContext();\n    const disabled = useCombinedStore([\n        useMessage,\n        useEditComposer\n    ], (m, c)=>c.isEditing || m.branches.indexOf(m.message.id) <= 0);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { message, branches } = useMessage.getState();\n        useThreadActions.getState().switchToBranch(branches[branches.indexOf(message.id) - 1]);\n    }, [\n        useThreadActions,\n        useMessage\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/composer/useComposerCancel.tsx\n\nvar useComposerCancel = ()=>{\n    const { useComposer } = useComposerContext();\n    const disabled = useComposer((c)=>!c.canCancel);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { cancel } = useComposer.getState();\n        cancel();\n    }, [\n        useComposer\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/composer/useComposerIf.tsx\nvar useComposerIf = (props)=>{\n    const { useComposer } = useComposerContext();\n    return useComposer((composer)=>{\n        if (props.editing === true && !composer.isEditing) return false;\n        if (props.editing === false && composer.isEditing) return false;\n        return true;\n    });\n};\n// src/primitive-hooks/composer/useComposerSend.tsx\n\nvar useComposerSend = ()=>{\n    const { useThread, useViewport, useComposer: useNewComposer } = useThreadContext();\n    const { useComposer } = useComposerContext();\n    const disabled = useCombinedStore([\n        useThread,\n        useComposer\n    ], (t, c)=>t.isRunning || !c.isEditing || c.isEmpty);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const composerState = useComposer.getState();\n        if (!composerState.isEditing) return;\n        composerState.send();\n        useViewport.getState().scrollToBottom();\n        useNewComposer.getState().focus();\n    }, [\n        useNewComposer,\n        useComposer,\n        useViewport\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/composer/useComposerAddAttachment.tsx\n\nvar useComposerAddAttachment = ()=>{\n    const { useComposer, useThreadRuntime } = useThreadContext();\n    const disabled = useComposer((c)=>!c.isEditing);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { addAttachment } = useComposer.getState();\n        const { attachmentAccept } = useThreadRuntime.getState().composer;\n        const input = document.createElement(\"input\");\n        input.type = \"file\";\n        if (attachmentAccept !== \"*\") {\n            input.accept = attachmentAccept;\n        }\n        input.onchange = (e)=>{\n            const file = e.target.files?.[0];\n            if (!file) return;\n            addAttachment(file);\n        };\n        input.click();\n    }, [\n        useComposer,\n        useThreadRuntime\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitive-hooks/contentPart/useContentPartDisplay.tsx\nvar useContentPartDisplay = ()=>{\n    const { useContentPart } = useContentPartContext();\n    const display = useContentPart((c)=>{\n        if (c.part.type !== \"ui\") throw new Error(\"This component can only be used inside ui content parts.\");\n        return c;\n    });\n    return display;\n};\n// src/primitive-hooks/contentPart/useContentPartImage.tsx\nvar useContentPartImage = ()=>{\n    const { useContentPart } = useContentPartContext();\n    const image = useContentPart((c)=>{\n        if (c.part.type !== \"image\") throw new Error(\"ContentPartImage can only be used inside image content parts.\");\n        return c;\n    });\n    return image;\n};\n// src/primitive-hooks/contentPart/useContentPartText.tsx\nvar useContentPartText = ()=>{\n    const { useContentPart } = useContentPartContext();\n    const text = useContentPart((c)=>{\n        if (c.part.type !== \"text\") throw new Error(\"ContentPartText can only be used inside text content parts.\");\n        return c;\n    });\n    return text;\n};\n// src/primitive-hooks/message/useMessageIf.tsx\nvar useMessageIf = (props)=>{\n    const { useMessage, useMessageUtils } = useMessageContext();\n    return useCombinedStore([\n        useMessage,\n        useMessageUtils\n    ], ({ message, branches, isLast }, { isCopied, isHovering, isSpeaking })=>{\n        if (props.hasBranches === true && branches.length < 2) return false;\n        if (props.user && message.role !== \"user\") return false;\n        if (props.assistant && message.role !== \"assistant\") return false;\n        if (props.system && message.role !== \"system\") return false;\n        if (props.lastOrHover === true && !isHovering && !isLast) return false;\n        if (props.copied === true && !isCopied) return false;\n        if (props.copied === false && isCopied) return false;\n        if (props.speaking === true && !isSpeaking) return false;\n        if (props.speaking === false && isSpeaking) return false;\n        if (props.hasAttachments === true && (message.role !== \"user\" || !message.attachments.length)) return false;\n        if (props.hasAttachments === false && message.role === \"user\" && !!message.attachments.length) return false;\n        return true;\n    });\n};\n// src/primitive-hooks/thread/useThreadIf.tsx\nvar useThreadIf = (props)=>{\n    const { useThread, useThreadMessages } = useThreadContext();\n    return useCombinedStore([\n        useThread,\n        useThreadMessages\n    ], (thread, messages)=>{\n        if (props.empty === true && messages.length !== 0) return false;\n        if (props.empty === false && messages.length === 0) return false;\n        if (props.running === true && !thread.isRunning) return false;\n        if (props.running === false && thread.isRunning) return false;\n        if (props.disabled === true && thread.isDisabled) return false;\n        if (props.disabled === false && thread.isDisabled) return false;\n        return true;\n    });\n};\n// src/primitive-hooks/thread/useThreadEmpty.tsx\nvar useThreadEmpty = ()=>{\n    return useThreadIf({\n        empty: true\n    });\n};\n// src/primitive-hooks/thread/useThreadScrollToBottom.tsx\n\nvar useThreadScrollToBottom = ()=>{\n    const { useComposer, useViewport } = useThreadContext();\n    const isAtBottom = useViewport((s)=>s.isAtBottom);\n    const handleScrollToBottom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        useViewport.getState().scrollToBottom();\n        useComposer.getState().focus();\n    }, [\n        useViewport,\n        useComposer\n    ]);\n    if (isAtBottom) return null;\n    return handleScrollToBottom;\n};\n// src/primitive-hooks/thread/useThreadSuggestion.tsx\n\nvar useThreadSuggestion = ({ prompt, autoSend })=>{\n    const { useThread, useComposer } = useThreadContext();\n    const append = useAppendMessage();\n    const disabled = useThread((t)=>t.isDisabled);\n    const callback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const thread = useThread.getState();\n        const composer = useComposer.getState();\n        if (autoSend && !thread.isRunning) {\n            append(prompt);\n            composer.setText(\"\");\n        } else {\n            composer.setText(prompt);\n        }\n    }, [\n        useThread,\n        useComposer,\n        autoSend,\n        append,\n        prompt\n    ]);\n    if (disabled) return null;\n    return callback;\n};\n// src/primitives/actionBar/index.ts\nvar actionBar_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(actionBar_exports, {\n    Copy: ()=>ActionBarPrimitiveCopy,\n    Edit: ()=>ActionBarPrimitiveEdit,\n    Reload: ()=>ActionBarPrimitiveReload,\n    Root: ()=>ActionBarPrimitiveRoot,\n    Speak: ()=>ActionBarPrimitiveSpeak,\n    StopSpeaking: ()=>ActionBarPrimitiveStopSpeaking\n});\n// src/primitives/actionBar/ActionBarRoot.tsx\n\n\n// src/primitives/actionBar/useActionBarFloatStatus.tsx\nvar useActionBarFloatStatus = ({ hideWhenRunning, autohide, autohideFloat })=>{\n    const { useThread } = useThreadContext();\n    const { useMessage, useMessageUtils } = useMessageContext();\n    return useCombinedStore([\n        useThread,\n        useMessage,\n        useMessageUtils\n    ], (t, m, mu)=>{\n        if (hideWhenRunning && t.isRunning) return \"hidden\" /* Hidden */ ;\n        const autohideEnabled = autohide === \"always\" || autohide === \"not-last\" && !m.isLast;\n        if (!autohideEnabled) return \"normal\" /* Normal */ ;\n        if (!mu.isHovering) return \"hidden\" /* Hidden */ ;\n        if (autohideFloat === \"always\" || autohideFloat === \"single-branch\" && m.branches.length <= 1) return \"floating\" /* Floating */ ;\n        return \"normal\" /* Normal */ ;\n    });\n};\n// src/primitives/actionBar/ActionBarRoot.tsx\n\nvar ActionBarPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ hideWhenRunning, autohide, autohideFloat, ...rest }, ref)=>{\n    const hideAndfloatStatus = useActionBarFloatStatus({\n        hideWhenRunning,\n        autohide,\n        autohideFloat\n    });\n    if (hideAndfloatStatus === \"hidden\" /* Hidden */ ) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.div, {\n        ...hideAndfloatStatus === \"floating\" /* Floating */  ? {\n            \"data-floating\": \"true\"\n        } : null,\n        ...rest,\n        ref\n    });\n});\nActionBarPrimitiveRoot.displayName = \"ActionBarPrimitive.Root\";\n// src/utils/createActionButton.tsx\n\n\n\n\nvar createActionButton = (displayName, useActionButton, forwardProps = [])=>{\n    const ActionButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{\n        const forwardedProps = {};\n        const primitiveProps = {};\n        Object.keys(props).forEach((key)=>{\n            if (forwardProps.includes(key)) {\n                forwardedProps[key] = props[key];\n            } else {\n                primitiveProps[key] = props[key];\n            }\n        });\n        const callback = useActionButton(forwardedProps);\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.button, {\n            type: \"button\",\n            ...primitiveProps,\n            ref: forwardedRef,\n            disabled: primitiveProps.disabled || !callback,\n            onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(primitiveProps.onClick, ()=>{\n                callback?.();\n            })\n        });\n    });\n    ActionButton.displayName = displayName;\n    return ActionButton;\n};\n// src/primitives/actionBar/ActionBarCopy.tsx\nvar ActionBarPrimitiveCopy = createActionButton(\"ActionBarPrimitive.Copy\", useActionBarCopy, [\n    \"copiedDuration\"\n]);\n// src/primitives/actionBar/ActionBarReload.tsx\nvar ActionBarPrimitiveReload = createActionButton(\"ActionBarPrimitive.Reload\", useActionBarReload);\n// src/primitives/actionBar/ActionBarEdit.tsx\nvar ActionBarPrimitiveEdit = createActionButton(\"ActionBarPrimitive.Edit\", useActionBarEdit);\n// src/primitives/actionBar/ActionBarSpeak.tsx\nvar ActionBarPrimitiveSpeak = createActionButton(\"ActionBarPrimitive.Speak\", useActionBarSpeak);\n// src/primitives/actionBar/ActionBarStopSpeaking.tsx\n\n\n\n\n\nvar ActionBarPrimitiveStopSpeaking = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const callback = useActionBarStopSpeaking();\n    (0,_radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_12__.useEscapeKeydown)((e)=>{\n        if (callback) {\n            e.preventDefault();\n            callback();\n        }\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.button, {\n        type: \"button\",\n        disabled: !callback,\n        ...props,\n        ref,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(props.onClick, ()=>{\n            callback?.();\n        })\n    });\n});\n// src/primitives/assistantModal/index.ts\nvar assistantModal_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(assistantModal_exports, {\n    Anchor: ()=>AssistantModalPrimitiveAnchor,\n    Content: ()=>AssistantModalPrimitiveContent,\n    Root: ()=>AssistantModalPrimitiveRoot,\n    Trigger: ()=>AssistantModalPrimitiveTrigger\n});\n// src/primitives/assistantModal/AssistantModalRoot.tsx\n\n\n\n// src/utils/hooks/useOnComposerFocus.tsx\n\n\nvar useOnComposerFocus = (callback)=>{\n    const callbackRef = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_6__.useCallbackRef)(callback);\n    const { useComposer } = useThreadContext();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return useComposer.getState().onFocus(()=>{\n            callbackRef();\n        });\n    }, [\n        useComposer,\n        callbackRef\n    ]);\n};\n// src/primitives/assistantModal/scope.tsx\n\nvar usePopoverScope = _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__.createPopoverScope();\n// src/primitives/assistantModal/AssistantModalRoot.tsx\n\nvar useAssistantModalOpenState = (defaultOpen = false)=>{\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultOpen);\n    const [, setOpen] = state;\n    useOnComposerFocus(()=>{\n        setOpen(true);\n    });\n    return state;\n};\nvar AssistantModalPrimitiveRoot = ({ __scopeAssistantModal, defaultOpen, open, onOpenChange, ...rest })=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    const [modalOpen, setOpen] = useAssistantModalOpenState(defaultOpen);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__.Root, {\n        ...scope,\n        open: open === void 0 ? modalOpen : open,\n        onOpenChange: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(onOpenChange, setOpen),\n        ...rest\n    });\n};\nAssistantModalPrimitiveRoot.displayName = \"AssistantModalPrimitive.Root\";\n// src/primitives/assistantModal/AssistantModalTrigger.tsx\n\n\n\nvar AssistantModalPrimitiveTrigger = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ __scopeAssistantModal, ...rest }, ref)=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__.Trigger, {\n        ...scope,\n        ...rest,\n        ref\n    });\n});\nAssistantModalPrimitiveTrigger.displayName = \"AssistantModalPrimitive.Trigger\";\n// src/primitives/assistantModal/AssistantModalContent.tsx\n\n\n\n\nvar AssistantModalPrimitiveContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ __scopeAssistantModal, side, align, onInteractOutside, dissmissOnInteractOutside = false, ...props }, forwardedRef)=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__.Portal, {\n        ...scope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__.Content, {\n            ...scope,\n            ...props,\n            ref: forwardedRef,\n            side: side ?? \"top\",\n            align: align ?? \"end\",\n            onInteractOutside: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(onInteractOutside, dissmissOnInteractOutside ? void 0 : (e)=>e.preventDefault())\n        })\n    });\n});\nAssistantModalPrimitiveContent.displayName = \"AssistantModalPrimitive.Content\";\n// src/primitives/assistantModal/AssistantModalAnchor.tsx\n\n\n\nvar AssistantModalPrimitiveAnchor = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ __scopeAssistantModal, ...rest }, ref)=>{\n    const scope = usePopoverScope(__scopeAssistantModal);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_13__.Anchor, {\n        ...scope,\n        ...rest,\n        ref\n    });\n});\nAssistantModalPrimitiveAnchor.displayName = \"AssistantModalPrimitive.Anchor\";\n// src/primitives/branchPicker/index.ts\nvar branchPicker_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(branchPicker_exports, {\n    Count: ()=>BranchPickerPrimitiveCount,\n    Next: ()=>BranchPickerPrimitiveNext,\n    Number: ()=>BranchPickerPrimitiveNumber,\n    Previous: ()=>BranchPickerPrevious,\n    Root: ()=>BranchPickerPrimitiveRoot\n});\n// src/primitives/branchPicker/BranchPickerNext.tsx\nvar BranchPickerPrimitiveNext = createActionButton(\"BranchPickerPrimitive.Next\", useBranchPickerNext);\n// src/primitives/branchPicker/BranchPickerPrevious.tsx\nvar BranchPickerPrevious = createActionButton(\"BranchPickerPrimitive.Previous\", useBranchPickerPrevious);\n// src/primitives/branchPicker/BranchPickerCount.tsx\n\nvar BranchPickerPrimitiveCount = ()=>{\n    const branchCount = useBranchPickerCount();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n        children: branchCount\n    });\n};\nBranchPickerPrimitiveCount.displayName = \"BranchPickerPrimitive.Count\";\n// src/primitives/branchPicker/BranchPickerNumber.tsx\n\nvar BranchPickerPrimitiveNumber = ()=>{\n    const branchNumber = useBranchPickerNumber();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n        children: branchNumber\n    });\n};\nBranchPickerPrimitiveNumber.displayName = \"BranchPickerPrimitive.Number\";\n// src/primitives/branchPicker/BranchPickerRoot.tsx\n\n\n// src/primitives/message/index.ts\nvar message_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(message_exports, {\n    Attachments: ()=>MessagePrimitiveAttachments,\n    Content: ()=>MessagePrimitiveContent,\n    If: ()=>MessagePrimitiveIf,\n    InProgress: ()=>MessagePrimitiveInProgress,\n    Root: ()=>MessagePrimitiveRoot\n});\n// src/primitives/message/MessageRoot.tsx\n\n\n// src/utils/hooks/useManagedRef.ts\n\nvar useManagedRef = (callback)=>{\n    const cleanupRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((el)=>{\n        if (cleanupRef.current) {\n            cleanupRef.current();\n        }\n        if (el) {\n            cleanupRef.current = callback(el);\n        }\n    }, [\n        callback\n    ]);\n    return ref;\n};\n// src/primitives/message/MessageRoot.tsx\n\n\nvar useIsHoveringRef = ()=>{\n    const { useMessageUtils } = useMessageContext();\n    const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((el)=>{\n        const setIsHovering = useMessageUtils.getState().setIsHovering;\n        const handleMouseEnter = ()=>{\n            setIsHovering(true);\n        };\n        const handleMouseLeave = ()=>{\n            setIsHovering(false);\n        };\n        el.addEventListener(\"mouseenter\", handleMouseEnter);\n        el.addEventListener(\"mouseleave\", handleMouseLeave);\n        return ()=>{\n            el.removeEventListener(\"mouseenter\", handleMouseEnter);\n            el.removeEventListener(\"mouseleave\", handleMouseLeave);\n            setIsHovering(false);\n        };\n    }, [\n        useMessageUtils\n    ]);\n    return useManagedRef(callbackRef);\n};\nvar MessagePrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ onMouseEnter, onMouseLeave, ...rest }, forwardRef30)=>{\n    const isHoveringRef = useIsHoveringRef();\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__.useComposedRefs)(forwardRef30, isHoveringRef);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.div, {\n        ...rest,\n        ref\n    });\n});\nMessagePrimitiveRoot.displayName = \"MessagePrimitive.Root\";\n// src/primitives/message/MessageIf.tsx\nvar MessagePrimitiveIf = ({ children, ...query })=>{\n    const result = useMessageIf(query);\n    return result ? children : null;\n};\nMessagePrimitiveIf.displayName = \"MessagePrimitive.If\";\n// src/primitives/message/MessageContent.tsx\n\n// src/context/providers/ContentPartProvider.tsx\n\n\n\nvar COMPLETE_STATUS = {\n    type: \"complete\"\n};\nvar toContentPartStatus = (message, partIndex, part)=>{\n    if (message.role !== \"assistant\") return COMPLETE_STATUS;\n    const isLastPart = partIndex === Math.max(0, message.content.length - 1);\n    if (part.type !== \"tool-call\") {\n        if (\"reason\" in message.status && message.status.reason === \"tool-calls\" && isLastPart) throw new Error(\"Encountered unexpected requires-action status. This is likely an internal bug in assistant-ui.\");\n        return isLastPart ? message.status : COMPLETE_STATUS;\n    }\n    if (!!part.result) {\n        return COMPLETE_STATUS;\n    }\n    return message.status;\n};\nvar EMPTY_CONTENT = Object.freeze({\n    type: \"text\",\n    text: \"\"\n});\nvar getContentPartState = ({ message }, useContentPart, partIndex)=>{\n    let part = message.content[partIndex];\n    if (!part) {\n        if (message.content.length === 0 && partIndex === 0) {\n            part = EMPTY_CONTENT;\n        } else {\n            return null;\n        }\n    }\n    const status = toContentPartStatus(message, partIndex, part);\n    const currentState = useContentPart?.getState();\n    if (currentState && currentState.part === part && currentState.status === status) return null;\n    return Object.freeze({\n        part,\n        status\n    });\n};\nvar useContentPartContext2 = (partIndex)=>{\n    const { useMessage } = useMessageContext();\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useContentPart = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>getContentPartState(useMessage.getState(), void 0, partIndex));\n        return {\n            useContentPart\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const syncContentPart = (message)=>{\n            const newState = getContentPartState(message, context.useContentPart, partIndex);\n            if (!newState) return;\n            writableStore(context.useContentPart).setState(newState, true);\n        };\n        syncContentPart(useMessage.getState());\n        return useMessage.subscribe(syncContentPart);\n    }, [\n        context,\n        useMessage,\n        partIndex\n    ]);\n    return context;\n};\nvar ContentPartProvider = ({ partIndex, children })=>{\n    const context = useContentPartContext2(partIndex);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ContentPartContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/contentPart/ContentPartText.tsx\n\n\nvar ContentPartPrimitiveText = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ smooth = true, component: Component = \"span\", ...rest }, forwardedRef)=>{\n    const { part: { text }, status } = useSmooth(useContentPartText(), smooth);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Component, {\n        \"data-status\": status.type,\n        ...rest,\n        ref: forwardedRef,\n        children: text\n    });\n});\nContentPartPrimitiveText.displayName = \"ContentPartPrimitive.Text\";\n// src/primitives/contentPart/ContentPartImage.tsx\n\n\n\nvar ContentPartPrimitiveImage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, forwardedRef)=>{\n    const { part: { image } } = useContentPartImage();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.img, {\n        src: image,\n        ...props,\n        ref: forwardedRef\n    });\n});\nContentPartPrimitiveImage.displayName = \"ContentPartPrimitive.Image\";\n// src/primitives/contentPart/ContentPartDisplay.tsx\nvar ContentPartPrimitiveDisplay = ()=>{\n    const { part: { display } } = useContentPartDisplay();\n    return display ?? null;\n};\nContentPartPrimitiveDisplay.displayName = \"ContentPartPrimitive.Display\";\n// src/primitives/contentPart/ContentPartInProgress.tsx\nvar ContentPartPrimitiveInProgress = ({ children })=>{\n    const { useContentPart } = useContentPartContext();\n    const isInProgress = useContentPart((c)=>c.status.type === \"running\");\n    return isInProgress ? children : null;\n};\nContentPartPrimitiveInProgress.displayName = \"ContentPartPrimitive.InProgress\";\n// src/primitives/message/MessageContent.tsx\n\nvar ToolUIDisplay = ({ UI, ...props })=>{\n    const { useToolUIs } = useAssistantContext();\n    const Render = useToolUIs((s)=>s.getToolUI(props.part.toolName)) ?? UI;\n    if (!Render) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Render, {\n        ...props\n    });\n};\nvar defaultComponents = {\n    Text: ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"p\", {\n            style: {\n                whiteSpace: \"pre-line\"\n            },\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ContentPartPrimitiveText, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ContentPartPrimitiveInProgress, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n                        style: {\n                            fontFamily: \"revert\"\n                        },\n                        children: \" ●\"\n                    })\n                })\n            ]\n        }),\n    Image: ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ContentPartPrimitiveImage, {}),\n    UI: ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ContentPartPrimitiveDisplay, {})\n};\nvar MessageContentPartComponent = ({ components: { Empty = defaultComponents.Text, Text: Text2 = defaultComponents.Text, Image: Image2 = defaultComponents.Image, UI = defaultComponents.UI, tools: { by_name = {}, Fallback: Fallback2 = void 0 } = {} } = {} })=>{\n    const { useThreadActions } = useThreadContext();\n    const { useMessage } = useMessageContext();\n    const addToolResult = useThreadActions((t)=>t.addToolResult);\n    const { useContentPart } = useContentPartContext();\n    const { part, status } = useContentPart();\n    const type = part.type;\n    switch(type){\n        case \"text\":\n            if (status.type === \"requires-action\") throw new Error(\"Encountered unexpected requires-action status\");\n            if (part === EMPTY_CONTENT) return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Empty, {\n                part,\n                status\n            });\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Text2, {\n                part,\n                status\n            });\n        case \"image\":\n            if (status.type === \"requires-action\") throw new Error(\"Encountered unexpected requires-action status\");\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Image2, {\n                part,\n                status\n            });\n        case \"ui\":\n            if (status.type === \"requires-action\") throw new Error(\"Encountered unexpected requires-action status\");\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UI, {\n                part,\n                status\n            });\n        case \"tool-call\":\n            {\n                const Tool = by_name[part.toolName] || Fallback2;\n                const addResult = (result)=>addToolResult({\n                        messageId: useMessage.getState().message.id,\n                        toolName: part.toolName,\n                        toolCallId: part.toolCallId,\n                        result\n                    });\n                return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ToolUIDisplay, {\n                    UI: Tool,\n                    part,\n                    status,\n                    addResult\n                });\n            }\n        default:\n            const unhandledType = type;\n            throw new Error(`Unknown content part type: ${unhandledType}`);\n    }\n};\nvar MessageContentPartImpl = ({ partIndex, components })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ContentPartProvider, {\n        partIndex,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessageContentPartComponent, {\n            components\n        })\n    });\n};\nvar MessageContentPart = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageContentPartImpl, (prev, next)=>prev.partIndex === next.partIndex && prev.components?.Text === next.components?.Text && prev.components?.Image === next.components?.Image && prev.components?.UI === next.components?.UI && prev.components?.tools === next.components?.tools);\nvar MessagePrimitiveContent = ({ components })=>{\n    const { useMessage } = useMessageContext();\n    const contentLength = useMessage((s)=>s.message.content.length) || 1;\n    return Array.from({\n        length: contentLength\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessageContentPart, {\n            partIndex: index,\n            components\n        }, index));\n};\nMessagePrimitiveContent.displayName = \"MessagePrimitive.Content\";\n// src/primitives/message/MessageInProgress.tsx\nvar MessagePrimitiveInProgress = ()=>{\n    return null;\n};\nMessagePrimitiveInProgress.displayName = \"MessagePrimitive.InProgress\";\n// src/primitives/message/MessageAttachments.tsx\n\n// src/context/react/AttachmentContext.ts\n\nvar AttachmentContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useAttachmentContext(options) {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AttachmentContext);\n    if (options?.type === \"composer\" && context?.type !== \"composer\") throw new Error(\"This component must be used within a ComposerPrimitive.Attachments component.\");\n    if (options?.type === \"message\" && context?.type !== \"message\") throw new Error(\"This component must be used within a MessagePrimitive.Attachments component.\");\n    if (!options?.optional && !context) throw new Error(\"This component must be used within a ComposerPrimitive.Attachments or MessagePrimitive.Attachments component.\");\n    return context;\n}\n// src/context/providers/MessageAttachmentProvider.tsx\n\n\n\nvar getAttachment = ({ message }, useAttachment, partIndex)=>{\n    if (message.role !== \"user\") return null;\n    const attachments = message.attachments;\n    let attachment = attachments[partIndex];\n    if (!attachment) return null;\n    const currentState = useAttachment?.getState();\n    if (currentState && currentState.attachment === attachment) return null;\n    return Object.freeze({\n        attachment\n    });\n};\nvar useMessageAttachmentContext = (partIndex)=>{\n    const { useMessage } = useMessageContext();\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useAttachment = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>getAttachment(useMessage.getState(), void 0, partIndex));\n        return {\n            type: \"message\",\n            useAttachment\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const syncAttachment = (messageState)=>{\n            const newState = getAttachment(messageState, context.useAttachment, partIndex);\n            if (!newState) return;\n            writableStore(context.useAttachment).setState(newState, true);\n        };\n        syncAttachment(useMessage.getState());\n        return useMessage.subscribe(syncAttachment);\n    }, [\n        context,\n        useMessage,\n        partIndex\n    ]);\n    return context;\n};\nvar MessageAttachmentProvider = ({ attachmentIndex: partIndex, children })=>{\n    const context = useMessageAttachmentContext(partIndex);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AttachmentContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/message/MessageAttachments.tsx\n\nvar getComponent = (components, attachment)=>{\n    const type = attachment.type;\n    switch(type){\n        case \"image\":\n            return components?.Image ?? components?.Attachment;\n        case \"document\":\n            return components?.Document ?? components?.Attachment;\n        case \"file\":\n            return components?.File ?? components?.Attachment;\n        default:\n            const _exhaustiveCheck = type;\n            throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);\n    }\n};\nvar AttachmentComponent = ({ components })=>{\n    const { useAttachment } = useAttachmentContext({\n        type: \"message\"\n    });\n    const Component = useAttachment((a)=>getComponent(components, a.attachment));\n    if (!Component) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Component, {});\n};\nvar MessageAttachmentImpl = ({ components, attachmentIndex })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessageAttachmentProvider, {\n        attachmentIndex,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AttachmentComponent, {\n            components\n        })\n    });\n};\nvar MessageAttachment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageAttachmentImpl, (prev, next)=>prev.attachmentIndex === next.attachmentIndex && prev.components?.Image === next.components?.Image && prev.components?.Document === next.components?.Document && prev.components?.File === next.components?.File && prev.components?.Attachment === next.components?.Attachment);\nvar MessagePrimitiveAttachments = ({ components })=>{\n    const { useMessage } = useMessageContext();\n    const attachmentsCount = useMessage(({ message })=>{\n        if (message.role !== \"user\") return 0;\n        return message.attachments.length;\n    });\n    return Array.from({\n        length: attachmentsCount\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessageAttachment, {\n            attachmentIndex: index,\n            components\n        }, index));\n};\nMessagePrimitiveAttachments.displayName = \"MessagePrimitive.Attachments\";\n// src/primitives/branchPicker/BranchPickerRoot.tsx\n\nvar BranchPickerPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ hideWhenSingleBranch, ...rest }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessagePrimitiveIf, {\n        hasBranches: hideWhenSingleBranch ? true : void 0,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.div, {\n            ...rest,\n            ref\n        })\n    });\n});\nBranchPickerPrimitiveRoot.displayName = \"BranchPickerPrimitive.Root\";\n// src/primitives/composer/index.ts\nvar composer_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(composer_exports, {\n    AddAttachment: ()=>ComposerPrimitiveAddAttachment,\n    Attachments: ()=>ComposerPrimitiveAttachments,\n    Cancel: ()=>ComposerPrimitiveCancel,\n    If: ()=>ComposerPrimitiveIf,\n    Input: ()=>ComposerPrimitiveInput,\n    Root: ()=>ComposerPrimitiveRoot,\n    Send: ()=>ComposerPrimitiveSend\n});\n// src/primitives/composer/ComposerRoot.tsx\n\n\n\n\nvar ComposerPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ onSubmit, ...rest }, forwardedRef)=>{\n    const send = useComposerSend();\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if (!send) return;\n        send();\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.form, {\n        ...rest,\n        ref: forwardedRef,\n        onSubmit: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(onSubmit, handleSubmit)\n    });\n});\nComposerPrimitiveRoot.displayName = \"ComposerPrimitive.Root\";\n// src/primitives/composer/ComposerInput.tsx\n\n\n\n\n\n\n\nvar ComposerPrimitiveInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ autoFocus = false, asChild, disabled: disabledProp, onChange, onKeyDown, ...rest }, forwardedRef)=>{\n    const { useThread } = useThreadContext();\n    const { useComposer, type } = useComposerContext();\n    const value = useComposer((c)=>{\n        if (!c.isEditing) return \"\";\n        return c.text;\n    });\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_15__.Slot : react_textarea_autosize__WEBPACK_IMPORTED_MODULE_16__[\"default\"];\n    const isDisabled = useThread((t)=>t.isDisabled) ?? disabledProp ?? false;\n    const textareaRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__.useComposedRefs)(forwardedRef, textareaRef);\n    (0,_radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_12__.useEscapeKeydown)((e)=>{\n        const composer = useComposer.getState();\n        if (composer.canCancel) {\n            composer.cancel();\n            e.preventDefault();\n        }\n    });\n    const handleKeyPress = (e)=>{\n        if (isDisabled) return;\n        if (e.nativeEvent.isComposing) return;\n        if (e.key === \"Enter\" && e.shiftKey === false) {\n            const { isRunning } = useThread.getState();\n            if (!isRunning) {\n                e.preventDefault();\n                textareaRef.current?.closest(\"form\")?.requestSubmit();\n            }\n        }\n    };\n    const autoFocusEnabled = autoFocus && !isDisabled;\n    const focus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const textarea = textareaRef.current;\n        if (!textarea || !autoFocusEnabled) return;\n        textarea.focus({\n            preventScroll: true\n        });\n        textarea.setSelectionRange(textareaRef.current.value.length, textareaRef.current.value.length);\n    }, [\n        autoFocusEnabled\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>focus(), [\n        focus\n    ]);\n    useOnComposerFocus(()=>{\n        if (type === \"new\") {\n            focus();\n        }\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Component, {\n        name: \"input\",\n        value,\n        ...rest,\n        ref,\n        disabled: isDisabled,\n        onChange: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(onChange, (e)=>{\n            const composerState = useComposer.getState();\n            if (!composerState.isEditing) return;\n            return composerState.setText(e.target.value);\n        }),\n        onKeyDown: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_11__.composeEventHandlers)(onKeyDown, handleKeyPress)\n    });\n});\nComposerPrimitiveInput.displayName = \"ComposerPrimitive.Input\";\n// src/primitives/composer/ComposerSend.tsx\nvar ComposerPrimitiveSend = createActionButton(\"ComposerPrimitive.Send\", useComposerSend);\n// src/primitives/composer/ComposerCancel.tsx\nvar ComposerPrimitiveCancel = createActionButton(\"ComposerPrimitive.Cancel\", useComposerCancel);\n// src/primitives/composer/ComposerAddAttachment.tsx\nvar ComposerPrimitiveAddAttachment = createActionButton(\"ComposerPrimitive.AddAttachment\", useComposerAddAttachment);\n// src/primitives/composer/ComposerAttachments.tsx\n\n// src/context/providers/ComposerAttachmentProvider.tsx\n\n\n\nvar getAttachment2 = ({ attachments }, useAttachment, partIndex)=>{\n    let attachment = attachments[partIndex];\n    if (!attachment) return null;\n    const currentState = useAttachment?.getState();\n    if (currentState && currentState.attachment === attachment) return null;\n    return Object.freeze({\n        attachment\n    });\n};\nvar useComposerAttachmentContext = (partIndex)=>{\n    const { useComposer } = useThreadContext();\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useAttachment = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>getAttachment2(useComposer.getState(), void 0, partIndex));\n        return {\n            type: \"composer\",\n            useAttachment\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const syncAttachment = (composer)=>{\n            const newState = getAttachment2(composer, context.useAttachment, partIndex);\n            if (!newState) return;\n            writableStore(context.useAttachment).setState(newState, true);\n        };\n        syncAttachment(useComposer.getState());\n        return useComposer.subscribe(syncAttachment);\n    }, [\n        context,\n        useComposer,\n        partIndex\n    ]);\n    return context;\n};\nvar ComposerAttachmentProvider = ({ attachmentIndex: partIndex, children })=>{\n    const context = useComposerAttachmentContext(partIndex);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AttachmentContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/composer/ComposerAttachments.tsx\n\nvar getComponent2 = (components, attachment)=>{\n    const type = attachment.type;\n    switch(type){\n        case \"image\":\n            return components?.Image ?? components?.Attachment;\n        case \"document\":\n            return components?.Document ?? components?.Attachment;\n        case \"file\":\n            return components?.File ?? components?.Attachment;\n        default:\n            const _exhaustiveCheck = type;\n            throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);\n    }\n};\nvar AttachmentComponent2 = ({ components })=>{\n    const { useAttachment } = useAttachmentContext({\n        type: \"composer\"\n    });\n    const Component = useAttachment((a)=>getComponent2(components, a.attachment));\n    if (!Component) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Component, {});\n};\nvar ComposerAttachmentImpl = ({ components, attachmentIndex })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAttachmentProvider, {\n        attachmentIndex,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AttachmentComponent2, {\n            components\n        })\n    });\n};\nvar ComposerAttachment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ComposerAttachmentImpl, (prev, next)=>prev.attachmentIndex === next.attachmentIndex && prev.components?.Image === next.components?.Image && prev.components?.Document === next.components?.Document && prev.components?.File === next.components?.File && prev.components?.Attachment === next.components?.Attachment);\nvar ComposerPrimitiveAttachments = ({ components })=>{\n    const { useComposer } = useThreadContext();\n    const attachmentsCount = useComposer((s)=>s.attachments.length);\n    return Array.from({\n        length: attachmentsCount\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAttachment, {\n            attachmentIndex: index,\n            components\n        }, index));\n};\nComposerPrimitiveAttachments.displayName = \"ComposerPrimitive.Attachments\";\n// src/primitives/composer/ComposerIf.tsx\nvar ComposerPrimitiveIf = ({ children, ...query })=>{\n    const result = useComposerIf(query);\n    return result ? children : null;\n};\nComposerPrimitiveIf.displayName = \"ComposerPrimitive.If\";\n// src/primitives/contentPart/index.ts\nvar contentPart_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(contentPart_exports, {\n    Display: ()=>ContentPartPrimitiveDisplay,\n    Image: ()=>ContentPartPrimitiveImage,\n    InProgress: ()=>ContentPartPrimitiveInProgress,\n    Text: ()=>ContentPartPrimitiveText\n});\n// src/primitives/thread/index.ts\nvar thread_exports = {};\n(0,_chunk_BJPOCE4O_mjs__WEBPACK_IMPORTED_MODULE_3__.__export)(thread_exports, {\n    Empty: ()=>ThreadPrimitiveEmpty,\n    If: ()=>ThreadPrimitiveIf,\n    Messages: ()=>ThreadPrimitiveMessages,\n    Root: ()=>ThreadPrimitiveRoot,\n    ScrollToBottom: ()=>ThreadPrimitiveScrollToBottom,\n    Suggestion: ()=>ThreadPrimitiveSuggestion,\n    Viewport: ()=>ThreadPrimitiveViewport\n});\n// src/primitives/thread/ThreadRoot.tsx\n\n\n\nvar ThreadPrimitiveRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.div, {\n        ...props,\n        ref\n    });\n});\nThreadPrimitiveRoot.displayName = \"ThreadPrimitive.Root\";\n// src/primitives/thread/ThreadEmpty.tsx\nvar ThreadPrimitiveEmpty = ({ children })=>{\n    const empty = useThreadEmpty();\n    return empty ? children : null;\n};\nThreadPrimitiveEmpty.displayName = \"ThreadPrimitive.Empty\";\n// src/primitives/thread/ThreadIf.tsx\nvar ThreadPrimitiveIf = ({ children, ...query })=>{\n    const result = useThreadIf(query);\n    return result ? children : null;\n};\nThreadPrimitiveIf.displayName = \"ThreadPrimitive.If\";\n// src/primitives/thread/ThreadViewport.tsx\n\n\n\n// src/primitive-hooks/thread/useThreadViewportAutoScroll.tsx\n\n\n// src/utils/hooks/useOnResizeContent.tsx\n\n\nvar useOnResizeContent = (callback)=>{\n    const callbackRef = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_6__.useCallbackRef)(callback);\n    const refCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((el)=>{\n        const resizeObserver = new ResizeObserver(()=>{\n            callbackRef();\n        });\n        const mutationObserver = new MutationObserver((mutations)=>{\n            for (const mutation of mutations){\n                for (const node of mutation.addedNodes){\n                    if (node instanceof Element) {\n                        resizeObserver.observe(node);\n                    }\n                }\n                for (const node of mutation.removedNodes){\n                    if (node instanceof Element) {\n                        resizeObserver.unobserve(node);\n                    }\n                }\n            }\n            callbackRef();\n        });\n        resizeObserver.observe(el);\n        mutationObserver.observe(el, {\n            childList: true\n        });\n        for (const child of el.children){\n            resizeObserver.observe(child);\n        }\n        return ()=>{\n            resizeObserver.disconnect();\n            mutationObserver.disconnect();\n        };\n    }, [\n        callbackRef\n    ]);\n    return useManagedRef(refCallback);\n};\n// src/utils/hooks/useOnScrollToBottom.tsx\n\n\nvar useOnScrollToBottom = (callback)=>{\n    const callbackRef = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_6__.useCallbackRef)(callback);\n    const { useViewport } = useThreadContext();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return useViewport.getState().onScrollToBottom(()=>{\n            callbackRef();\n        });\n    }, [\n        useViewport,\n        callbackRef\n    ]);\n};\n// src/primitive-hooks/thread/useThreadViewportAutoScroll.tsx\nvar useThreadViewportAutoScroll = ({ autoScroll = true })=>{\n    const divRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { useViewport } = useThreadContext();\n    const lastScrollTop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const isScrollingToBottomRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const scrollToBottom = (behavior)=>{\n        const div = divRef.current;\n        if (!div || !autoScroll) return;\n        isScrollingToBottomRef.current = true;\n        div.scrollTo({\n            top: div.scrollHeight,\n            behavior\n        });\n    };\n    const handleScroll = ()=>{\n        const div = divRef.current;\n        if (!div) return;\n        const isAtBottom = useViewport.getState().isAtBottom;\n        const newIsAtBottom = div.scrollHeight - div.scrollTop <= div.clientHeight + 1;\n        if (!newIsAtBottom && lastScrollTop.current < div.scrollTop) {} else {\n            if (newIsAtBottom) {\n                isScrollingToBottomRef.current = false;\n            }\n            if (newIsAtBottom !== isAtBottom) {\n                writableStore(useViewport).setState({\n                    isAtBottom: newIsAtBottom\n                });\n            }\n        }\n        lastScrollTop.current = div.scrollTop;\n    };\n    const resizeRef = useOnResizeContent(()=>{\n        if (isScrollingToBottomRef.current || useViewport.getState().isAtBottom) {\n            scrollToBottom(\"instant\");\n        }\n        handleScroll();\n    });\n    const scrollRef = useManagedRef((el)=>{\n        el.addEventListener(\"scroll\", handleScroll);\n        return ()=>{\n            el.removeEventListener(\"scroll\", handleScroll);\n        };\n    });\n    const autoScrollRef = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__.useComposedRefs)(resizeRef, scrollRef, divRef);\n    useOnScrollToBottom(()=>{\n        scrollToBottom(\"auto\");\n    });\n    return autoScrollRef;\n};\n// src/primitives/thread/ThreadViewport.tsx\n\nvar ThreadPrimitiveViewport = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ autoScroll, onScroll, children, ...rest }, forwardedRef)=>{\n    const autoScrollRef = useThreadViewportAutoScroll({\n        autoScroll\n    });\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__.useComposedRefs)(forwardedRef, autoScrollRef);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_10__.Primitive.div, {\n        ...rest,\n        ref,\n        children\n    });\n});\nThreadPrimitiveViewport.displayName = \"ThreadPrimitive.Viewport\";\n// src/primitives/thread/ThreadMessages.tsx\n\n// src/context/providers/MessageProvider.tsx\n\n\n// src/context/stores/EditComposer.ts\n\nvar makeEditComposerStore = ({ onEdit, onSend })=>(0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)()((set, get)=>({\n            get value () {\n                return get().text;\n            },\n            setValue (value) {\n                get().setText(value);\n            },\n            text: \"\",\n            setText: (text)=>{\n                set({\n                    text,\n                    isEmpty: text.trim().length === 0\n                });\n            },\n            canCancel: false,\n            isEditing: false,\n            isEmpty: true,\n            edit: ()=>{\n                const text = onEdit();\n                set({\n                    isEditing: true,\n                    canCancel: true,\n                    isEmpty: text.trim().length === 0,\n                    text\n                });\n            },\n            send: ()=>{\n                const text = get().text;\n                set({\n                    isEditing: false,\n                    canCancel: false\n                });\n                onSend(text);\n            },\n            cancel: ()=>{\n                set({\n                    isEditing: false,\n                    canCancel: false\n                });\n            }\n        }));\n// src/context/stores/MessageUtils.ts\n\nvar makeMessageUtilsStore = ()=>(0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)((set)=>{\n        let utterance = null;\n        return {\n            isCopied: false,\n            setIsCopied: (value)=>{\n                set({\n                    isCopied: value\n                });\n            },\n            isHovering: false,\n            setIsHovering: (value)=>{\n                set({\n                    isHovering: value\n                });\n            },\n            isSpeaking: false,\n            stopSpeaking: ()=>{\n                utterance?.cancel();\n            },\n            addUtterance: (utt)=>{\n                utterance = utt;\n                set({\n                    isSpeaking: true\n                });\n                utt.onEnd(()=>{\n                    set({\n                        isSpeaking: false\n                    });\n                });\n            }\n        };\n    });\n// src/context/providers/MessageProvider.tsx\n\nvar getIsLast = (messages, message)=>{\n    return messages[messages.length - 1]?.id === message.id;\n};\nvar getMessageState = (messages, getBranches, useMessage, messageIndex)=>{\n    const parentId = messages[messageIndex - 1]?.id ?? null;\n    const message = messages[messageIndex];\n    if (!message) return null;\n    const isLast = getIsLast(messages, message);\n    const branches = getBranches(message.id);\n    const currentState = useMessage?.getState();\n    if (currentState && currentState.message === message && currentState.parentId === parentId && currentState.branches === branches && currentState.isLast === isLast) return null;\n    return Object.freeze({\n        message,\n        parentId,\n        branches,\n        isLast\n    });\n};\nvar useMessageContext2 = (messageIndex)=>{\n    const { useThreadMessages, useThreadActions } = useThreadContext();\n    const [context] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const useMessage = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)(()=>getMessageState(useThreadMessages.getState(), useThreadActions.getState().getBranches, void 0, messageIndex));\n        const useMessageUtils = makeMessageUtilsStore();\n        const useEditComposer = makeEditComposerStore({\n            onEdit: ()=>{\n                const message = useMessage.getState().message;\n                if (message.role !== \"user\") throw new Error(\"Tried to edit a non-user message. Editing is only supported for user messages. This is likely an internal bug in assistant-ui.\");\n                const text = getThreadMessageText(message);\n                return text;\n            },\n            onSend: (text)=>{\n                const { message, parentId } = useMessage.getState();\n                if (message.role !== \"user\") throw new Error(\"Tried to edit a non-user message. Editing is only supported for user messages. This is likely an internal bug in assistant-ui.\");\n                const previousText = getThreadMessageText(message);\n                if (previousText === text) return;\n                const nonTextParts = message.content.filter((part)=>part.type !== \"text\" && part.type !== \"ui\");\n                useThreadActions.getState().append({\n                    parentId,\n                    role: \"user\",\n                    content: [\n                        {\n                            type: \"text\",\n                            text\n                        },\n                        ...nonTextParts\n                    ],\n                    attachments: message.attachments\n                });\n            }\n        });\n        return {\n            useMessage,\n            useMessageUtils,\n            useEditComposer\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const syncMessage = (thread)=>{\n            const newState = getMessageState(thread, useThreadActions.getState().getBranches, context.useMessage, messageIndex);\n            if (!newState) return;\n            writableStore(context.useMessage).setState(newState, true);\n        };\n        syncMessage(useThreadMessages.getState());\n        return useThreadMessages.subscribe(syncMessage);\n    }, [\n        useThreadMessages,\n        useThreadActions,\n        context,\n        messageIndex\n    ]);\n    return context;\n};\nvar MessageProvider = ({ messageIndex, children })=>{\n    const context = useMessageContext2(messageIndex);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessageContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/primitives/thread/ThreadMessages.tsx\n\nvar DEFAULT_SYSTEM_MESSAGE = ()=>null;\nvar getComponents = (components)=>{\n    return {\n        EditComposer: components.EditComposer ?? components.UserMessage ?? components.Message,\n        UserMessage: components.UserMessage ?? components.Message,\n        AssistantMessage: components.AssistantMessage ?? components.Message,\n        SystemMessage: components.SystemMessage ?? DEFAULT_SYSTEM_MESSAGE\n    };\n};\nvar ThreadMessageImpl = ({ messageIndex, components })=>{\n    const { UserMessage: UserMessage2, EditComposer: EditComposer2, AssistantMessage: AssistantMessage2, SystemMessage: SystemMessage2 } = getComponents(components);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(MessageProvider, {\n        messageIndex,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(MessagePrimitiveIf, {\n                user: true,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerPrimitiveIf, {\n                        editing: false,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserMessage2, {})\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerPrimitiveIf, {\n                        editing: true,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(EditComposer2, {})\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessagePrimitiveIf, {\n                assistant: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantMessage2, {})\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MessagePrimitiveIf, {\n                system: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(SystemMessage2, {})\n            })\n        ]\n    });\n};\nvar ThreadMessage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ThreadMessageImpl, (prev, next)=>prev.messageIndex === next.messageIndex && prev.components.Message === next.components.Message && prev.components.UserMessage === next.components.UserMessage && prev.components.EditComposer === next.components.EditComposer && prev.components.AssistantMessage === next.components.AssistantMessage && prev.components.SystemMessage === next.components.SystemMessage);\nvar ThreadPrimitiveMessagesImpl = ({ components })=>{\n    const { useThreadMessages } = useThreadContext();\n    const messagesLength = useThreadMessages((t)=>t.length);\n    if (messagesLength === 0) return null;\n    return Array.from({\n        length: messagesLength\n    }, (_, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadMessage, {\n            messageIndex: index,\n            components\n        }, index));\n};\nThreadPrimitiveMessagesImpl.displayName = \"ThreadPrimitive.Messages\";\nvar ThreadPrimitiveMessages = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ThreadPrimitiveMessagesImpl, (prev, next)=>prev.components?.Message === next.components?.Message && prev.components?.UserMessage === next.components?.UserMessage && prev.components?.EditComposer === next.components?.EditComposer && prev.components?.AssistantMessage === next.components?.AssistantMessage && prev.components?.SystemMessage === next.components?.SystemMessage);\n// src/primitives/thread/ThreadScrollToBottom.tsx\nvar ThreadPrimitiveScrollToBottom = createActionButton(\"ThreadPrimitive.ScrollToBottom\", useThreadScrollToBottom);\n// src/primitives/thread/ThreadSuggestion.tsx\nvar ThreadPrimitiveSuggestion = createActionButton(\"ThreadPrimitive.Suggestion\", useThreadSuggestion, [\n    \"prompt\",\n    \"autoSend\",\n    \"method\"\n]);\n// src/ui/thread-config.tsx\n\n\nvar ThreadConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar useThreadConfig = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThreadConfigContext);\n};\nvar ThreadConfigProvider = ({ children, config })=>{\n    const assistant = useAssistantContext({\n        optional: true\n    });\n    const configProvider = config && Object.keys(config ?? {}).length > 0 ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadConfigContext.Provider, {\n        value: config,\n        children\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n        children\n    });\n    if (!config?.runtime) return configProvider;\n    if (assistant) {\n        throw new Error(\"You provided a runtime to <Thread> while simulataneously using <AssistantRuntimeProvider>. This is not allowed.\");\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantRuntimeProvider, {\n        runtime: config.runtime,\n        children: configProvider\n    });\n};\nThreadConfigProvider.displayName = \"ThreadConfigProvider\";\n// src/ui/assistant-action-bar.tsx\n\n\n\nvar useAllowCopy = (ensureCapability = false)=>{\n    const { assistantMessage: { allowCopy = true } = {} } = useThreadConfig();\n    const { useThread } = useThreadContext();\n    const copySupported = useThread((t)=>t.capabilities.unstable_copy);\n    return allowCopy && (!ensureCapability || copySupported);\n};\nvar useAllowSpeak = (ensureCapability = false)=>{\n    const { assistantMessage: { allowSpeak = true } = {} } = useThreadConfig();\n    const { useThread } = useThreadContext();\n    const speakSupported = useThread((t)=>t.capabilities.speak);\n    return allowSpeak && (!ensureCapability || speakSupported);\n};\nvar useAllowReload = (ensureCapability = false)=>{\n    const { assistantMessage: { allowReload = true } = {} } = useThreadConfig();\n    const { useThread } = useThreadContext();\n    const reloadSupported = useThread((t)=>t.capabilities.reload);\n    return allowReload && (!ensureCapability || reloadSupported);\n};\nvar AssistantActionBar = ()=>{\n    const allowCopy = useAllowCopy(true);\n    const allowReload = useAllowReload(true);\n    const allowSpeak = useAllowSpeak(true);\n    if (!allowCopy && !allowReload && !allowSpeak) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(AssistantActionBarRoot, {\n        hideWhenRunning: true,\n        autohide: \"not-last\",\n        autohideFloat: \"single-branch\",\n        children: [\n            allowSpeak && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantActionBarSpeechControl, {}),\n            allowCopy && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantActionBarCopy, {}),\n            allowReload && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantActionBarReload, {})\n        ]\n    });\n};\nAssistantActionBar.displayName = \"AssistantActionBar\";\nvar AssistantActionBarRoot = withDefaults(actionBar_exports.Root, {\n    className: \"aui-assistant-action-bar-root\"\n});\nAssistantActionBarRoot.displayName = \"AssistantActionBarRoot\";\nvar AssistantActionBarCopy = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { copy: { tooltip = \"Copy\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(actionBar_exports.Copy, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.If, {\n                        copied: true,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {})\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.If, {\n                        copied: false,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {})\n                    })\n                ]\n            })\n        })\n    });\n});\nAssistantActionBarCopy.displayName = \"AssistantActionBarCopy\";\nvar AssistantActionBarSpeechControl = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.If, {\n                speaking: false,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantActionBarSpeak, {})\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.If, {\n                speaking: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantActionBarStopSpeaking, {})\n            })\n        ]\n    });\n};\nvar AssistantActionBarSpeak = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { speak: { tooltip = \"Read aloud\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowSpeak = useAllowSpeak();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(actionBar_exports.Speak, {\n        disabled: !allowSpeak,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarSpeak.displayName = \"AssistantActionBarSpeak\";\nvar AssistantActionBarStopSpeaking = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { speak: { stop: { tooltip: stopTooltip = \"Stop\" } = {} } = {} } = {} } = {} } = useThreadConfig();\n    const allowSpeak = useAllowSpeak();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(actionBar_exports.StopSpeaking, {\n        disabled: !allowSpeak,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip: stopTooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarStopSpeaking.displayName = \"AssistantActionBarStopSpeaking\";\nvar AssistantActionBarReload = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { assistantMessage: { reload: { tooltip = \"Refresh\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowReload = useAllowReload();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(actionBar_exports.Reload, {\n        disabled: !allowReload,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_AudioLinesIcon_CheckIcon_CopyIcon_RefreshCwIcon_StopCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {})\n        })\n    });\n});\nAssistantActionBarReload.displayName = \"AssistantActionBarReload\";\nvar exports = {\n    Root: AssistantActionBarRoot,\n    Reload: AssistantActionBarReload,\n    Copy: AssistantActionBarCopy,\n    Speak: AssistantActionBarSpeak,\n    StopSpeaking: AssistantActionBarStopSpeaking,\n    SpeechControl: AssistantActionBarSpeechControl\n};\nvar assistant_action_bar_default = Object.assign(AssistantActionBar, exports);\n// src/ui/assistant-message.tsx\n\n// src/ui/branch-picker.tsx\n\n\n\nvar useAllowBranchPicker = (ensureCapability = false)=>{\n    const { branchPicker: { allowBranchPicker = true } = {} } = useThreadConfig();\n    const { useThread } = useThreadContext();\n    const branchPickerSupported = useThread((t)=>t.capabilities.edit);\n    return allowBranchPicker && (!ensureCapability || branchPickerSupported);\n};\nvar BranchPicker = ()=>{\n    const allowBranchPicker = useAllowBranchPicker();\n    if (!allowBranchPicker) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(BranchPickerRoot, {\n        hideWhenSingleBranch: true,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(BranchPickerPrevious2, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(BranchPickerState, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(BranchPickerNext, {})\n        ]\n    });\n};\nBranchPicker.displayName = \"BranchPicker\";\nvar BranchPickerRoot = withDefaults(branchPicker_exports.Root, {\n    className: \"aui-branch-picker-root\"\n});\nBranchPickerRoot.displayName = \"BranchPickerRoot\";\nvar BranchPickerPrevious2 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { branchPicker: { previous: { tooltip = \"Previous\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowBranchPicker = useAllowBranchPicker();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(branchPicker_exports.Previous, {\n        disabled: !allowBranchPicker,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_22__[\"default\"], {})\n        })\n    });\n});\nBranchPickerPrevious2.displayName = \"BranchPickerPrevious\";\nvar BranchPickerStateWrapper = withDefaults(\"span\", {\n    className: \"aui-branch-picker-state\"\n});\nvar BranchPickerState = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(BranchPickerStateWrapper, {\n        ...props,\n        ref,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(branchPicker_exports.Number, {}),\n            \" / \",\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(branchPicker_exports.Count, {})\n        ]\n    });\n});\nBranchPickerState.displayName = \"BranchPickerState\";\nvar BranchPickerNext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { branchPicker: { next: { tooltip = \"Next\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowBranchPicker = useAllowBranchPicker();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(branchPicker_exports.Next, {\n        disabled: !allowBranchPicker,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_ChevronLeftIcon_ChevronRightIcon_lucide_react__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {})\n        })\n    });\n});\nBranchPickerNext.displayName = \"BranchPickerNext\";\nvar exports2 = {\n    Root: BranchPickerRoot,\n    Previous: BranchPickerPrevious2,\n    Next: BranchPickerNext\n};\nvar branch_picker_default = Object.assign(BranchPicker, exports2);\n// src/ui/base/avatar.tsx\n\n\nvar Avatar = ({ src, alt, fallback })=>{\n    if (src == null && fallback == null) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(AvatarRoot, {\n        children: [\n            src != null && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AvatarImage, {\n                src,\n                alt\n            }),\n            fallback != null && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AvatarFallback, {\n                children: fallback\n            })\n        ]\n    });\n};\nAvatar.displayName = \"Avatar\";\nvar AvatarRoot = withDefaults(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_24__.Root, {\n    className: \"aui-avatar-root\"\n});\nAvatarRoot.displayName = \"AvatarRoot\";\nvar AvatarImage = withDefaults(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_24__.Image, {\n    className: \"aui-avatar-image\"\n});\nAvatarImage.displayName = \"AvatarImage\";\nvar AvatarFallback = withDefaults(_radix_ui_react_avatar__WEBPACK_IMPORTED_MODULE_24__.Fallback, {\n    className: \"aui-avatar-fallback\"\n});\nAvatarFallback.displayName = \"AvatarFallback\";\n// src/ui/content-part.tsx\n\n\nvar Text = ()=>{\n    const status = useSmoothStatus();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(contentPart_exports.Text, {\n        className: classnames__WEBPACK_IMPORTED_MODULE_7__(\"aui-text\", status.type === \"running\" && \"aui-text-running\"),\n        component: \"p\"\n    });\n};\nvar exports3 = {\n    Text: withSmoothContextProvider(Text)\n};\nvar content_part_default = exports3;\n// src/ui/assistant-message.tsx\n\nvar AssistantMessage = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(AssistantMessageRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantMessageAvatar, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantMessageContent, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(branch_picker_default, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(assistant_action_bar_default, {})\n        ]\n    });\n};\nAssistantMessage.displayName = \"AssistantMessage\";\nvar AssistantMessageAvatar = ()=>{\n    const { assistantAvatar: avatar = {\n        fallback: \"A\"\n    } } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Avatar, {\n        ...avatar\n    });\n};\nvar AssistantMessageRoot = withDefaults(message_exports.Root, {\n    className: \"aui-assistant-message-root\"\n});\nAssistantMessageRoot.displayName = \"AssistantMessageRoot\";\nvar AssistantMessageContentWrapper = withDefaults(\"div\", {\n    className: \"aui-assistant-message-content\"\n});\nvar AssistantMessageContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components: componentsProp, ...rest }, ref)=>{\n    const { tools, assistantMessage: { components = {} } = {} } = useThreadConfig();\n    const toolsComponents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            by_name: !tools ? void 0 : Object.fromEntries(tools.map((t)=>[\n                    t.unstable_tool.toolName,\n                    t.unstable_tool.render\n                ])),\n            Fallback: components.ToolFallback\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        ...tools ?? [],\n        components.ToolFallback\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantMessageContentWrapper, {\n        ...rest,\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.Content, {\n            components: {\n                ...componentsProp,\n                Text: componentsProp?.Text ?? components.Text ?? content_part_default.Text,\n                tools: toolsComponents\n            }\n        })\n    });\n});\nAssistantMessageContent.displayName = \"AssistantMessageContent\";\nvar exports4 = {\n    Root: AssistantMessageRoot,\n    Avatar: AssistantMessageAvatar,\n    Content: AssistantMessageContent\n};\nvar assistant_message_default = Object.assign(AssistantMessage, exports4);\n// src/ui/assistant-modal.tsx\n\n\n// src/ui/thread.tsx\n\n\n// src/ui/composer.tsx\n\n\n// src/ui/base/CircleStopIcon.tsx\n\nvar CircleStopIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        width: \"16\",\n        height: \"16\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"rect\", {\n            width: \"10\",\n            height: \"10\",\n            x: \"3\",\n            y: \"3\",\n            rx: \"2\"\n        })\n    });\n};\nCircleStopIcon.displayName = \"CircleStopIcon\";\n// src/ui/composer-attachment.tsx\n\n\n\nvar ComposerAttachmentRoot = withDefaults(\"div\", {\n    className: \"aui-composer-attachment-root\"\n});\nComposerAttachmentRoot.displayName = \"ComposerAttachmentRoot\";\nvar ComposerAttachment2 = ()=>{\n    const { useAttachment } = useAttachmentContext({\n        type: \"composer\"\n    });\n    const attachment = useAttachment((a)=>a.attachment);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ComposerAttachmentRoot, {\n        children: [\n            \".\",\n            attachment.name.split(\".\").pop(),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAttachmentRemove, {})\n        ]\n    });\n};\nComposerAttachment2.displayName = \"ComposerAttachment\";\nvar ComposerAttachmentRemove = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { removeAttachment: { tooltip = \"Remove file\" } = {} } = {} } = {} } = useThreadConfig();\n    const { useComposer } = useThreadContext();\n    const { useAttachment } = useAttachmentContext();\n    const handleRemoveAttachment = ()=>{\n        useComposer.getState().removeAttachment(useAttachment.getState().attachment.id);\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n        tooltip,\n        className: \"aui-composer-attachment-remove\",\n        side: \"top\",\n        ...props,\n        onClick: handleRemoveAttachment,\n        ref,\n        children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_CircleXIcon_lucide_react__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {})\n    });\n});\nComposerAttachmentRemove.displayName = \"ComposerAttachmentRemove\";\nvar exports5 = {\n    Root: ComposerAttachmentRoot,\n    Remove: ComposerAttachmentRemove\n};\nvar composer_attachment_default = Object.assign(ComposerAttachment2, exports5);\n// src/ui/composer.tsx\n\nvar useAllowAttachments = (ensureCapability = false)=>{\n    const { composer: { allowAttachments = true } = {} } = useThreadConfig();\n    const { useThread } = useThreadContext();\n    const attachmentsSupported = useThread((t)=>t.capabilities.attachments);\n    return allowAttachments && (!ensureCapability || attachmentsSupported);\n};\nvar Composer = ()=>{\n    const allowAttachments = useAllowAttachments(true);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ComposerRoot, {\n        children: [\n            allowAttachments && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAttachments, {}),\n            allowAttachments && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAddAttachment, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerInput, {\n                autoFocus: true\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAction, {})\n        ]\n    });\n};\nComposer.displayName = \"Composer\";\nvar ComposerRoot = withDefaults(composer_exports.Root, {\n    className: \"aui-composer-root\"\n});\nComposerRoot.displayName = \"ComposerRoot\";\nvar ComposerInputStyled = withDefaults(composer_exports.Input, {\n    rows: 1,\n    autoFocus: true,\n    className: \"aui-composer-input\"\n});\nvar ComposerInput = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { input: { placeholder = \"Write a message...\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerInputStyled, {\n        placeholder,\n        ...props,\n        ref\n    });\n});\nComposerInput.displayName = \"ComposerInput\";\nvar ComposerAttachmentsContainer = withDefaults(\"div\", {\n    className: \"aui-composer-attachments\"\n});\nvar ComposerAttachments = ({ components })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAttachmentsContainer, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_exports.Attachments, {\n            components: {\n                ...components,\n                Attachment: components?.Attachment ?? composer_attachment_default\n            }\n        })\n    });\n};\nvar ComposerAttachButton = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-composer-attach\"\n});\nvar ComposerAddAttachment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { addAttachment: { tooltip = \"Attach file\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowAttachments = useAllowAttachments();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_exports.AddAttachment, {\n        disabled: !allowAttachments,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerAttachButton, {\n            tooltip,\n            variant: \"ghost\",\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {})\n        })\n    });\n});\nComposerAddAttachment.displayName = \"ComposerAddAttachment\";\nvar useAllowCancel = ()=>{\n    const { useThread } = useThreadContext();\n    const cancelSupported = useThread((t)=>t.capabilities.cancel);\n    return cancelSupported;\n};\nvar ComposerAction = ()=>{\n    const allowCancel = useAllowCancel();\n    if (!allowCancel) return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerSend, {});\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_exports.If, {\n                running: false,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerSend, {})\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_exports.If, {\n                running: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerCancel, {})\n            })\n        ]\n    });\n};\nComposerAction.displayName = \"ComposerAction\";\nvar ComposerSendButton = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-composer-send\"\n});\nvar ComposerSend = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { send: { tooltip = \"Send\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_exports.Send, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerSendButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_PaperclipIcon_SendHorizontalIcon_lucide_react__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {})\n        })\n    });\n});\nComposerSend.displayName = \"ComposerSend\";\nvar ComposerCancelButton = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-composer-cancel\"\n});\nvar ComposerCancel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { composer: { cancel: { tooltip = \"Cancel\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_exports.Cancel, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ComposerCancelButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(CircleStopIcon, {})\n        })\n    });\n});\nComposerCancel.displayName = \"ComposerCancel\";\nvar exports6 = {\n    Root: ComposerRoot,\n    Input: ComposerInput,\n    Action: ComposerAction,\n    Send: ComposerSend,\n    Cancel: ComposerCancel,\n    AddAttachment: ComposerAddAttachment,\n    Attachments: ComposerAttachments\n};\nvar composer_default = Object.assign(Composer, exports6);\n// src/ui/thread-welcome.tsx\n\n\nvar ThreadWelcome = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ThreadWelcomeRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ThreadWelcomeCenter, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeAvatar, {}),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeMessage, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeSuggestions, {})\n        ]\n    });\n};\nThreadWelcome.displayName = \"ThreadWelcome\";\nvar ThreadWelcomeRootStyled = withDefaults(\"div\", {\n    className: \"aui-thread-welcome-root\"\n});\nvar ThreadWelcomeCenter = withDefaults(\"div\", {\n    className: \"aui-thread-welcome-center\"\n});\nvar ThreadWelcomeRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_exports.Empty, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeRootStyled, {\n            ...props,\n            ref\n        })\n    });\n});\nThreadWelcomeRoot.displayName = \"ThreadWelcomeRoot\";\nvar ThreadWelcomeAvatar = ()=>{\n    const { assistantAvatar: avatar = {\n        fallback: \"A\"\n    } } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Avatar, {\n        ...avatar\n    });\n};\nvar ThreadWelcomeMessageStyled = withDefaults(\"p\", {\n    className: \"aui-thread-welcome-message\"\n});\nvar ThreadWelcomeMessage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ message: messageProp, ...rest }, ref)=>{\n    const { welcome: { message = \"How can I help you today?\" } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeMessageStyled, {\n        ...rest,\n        ref,\n        children: messageProp ?? message\n    });\n});\nThreadWelcomeMessage.displayName = \"ThreadWelcomeMessage\";\nvar ThreadWelcomeSuggestionContainer = withDefaults(\"div\", {\n    className: \"aui-thread-welcome-suggestion-container\"\n});\nvar ThreadWelcomeSuggestionStyled = withDefaults(thread_exports.Suggestion, {\n    className: \"aui-thread-welcome-suggestion\"\n});\nvar ThreadWelcomeSuggestion = ({ suggestion: { text, prompt } })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeSuggestionStyled, {\n        prompt,\n        method: \"replace\",\n        autoSend: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"aui-thread-welcome-suggestion-text\",\n            children: text ?? prompt\n        })\n    });\n};\nvar ThreadWelcomeSuggestions = ()=>{\n    const { welcome: { suggestions } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeSuggestionContainer, {\n        children: suggestions?.map((suggestion, idx)=>{\n            const key = `${suggestion.prompt}-${idx}`;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadWelcomeSuggestion, {\n                suggestion\n            }, key);\n        })\n    });\n};\nThreadWelcomeSuggestions.displayName = \"ThreadWelcomeSuggestions\";\nvar exports7 = {\n    Root: ThreadWelcomeRoot,\n    Center: ThreadWelcomeCenter,\n    Avatar: ThreadWelcomeAvatar,\n    Message: ThreadWelcomeMessage,\n    Suggestions: ThreadWelcomeSuggestions,\n    Suggestion: ThreadWelcomeSuggestion\n};\nvar thread_welcome_default = Object.assign(ThreadWelcome, exports7);\n// src/ui/user-message.tsx\n\n// src/ui/user-action-bar.tsx\n\n\n\nvar useAllowEdit = (ensureCapability = false)=>{\n    const { userMessage: { allowEdit = true } = {} } = useThreadConfig();\n    const { useThread } = useThreadContext();\n    const editSupported = useThread((t)=>t.capabilities.edit);\n    return allowEdit && (!ensureCapability || editSupported);\n};\nvar UserActionBar = ()=>{\n    const allowEdit = useAllowEdit(true);\n    if (!allowEdit) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserActionBarRoot, {\n        hideWhenRunning: true,\n        autohide: \"not-last\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserActionBarEdit, {})\n    });\n};\nUserActionBar.displayName = \"UserActionBar\";\nvar UserActionBarRoot = withDefaults(actionBar_exports.Root, {\n    className: \"aui-user-action-bar-root\"\n});\nUserActionBarRoot.displayName = \"UserActionBarRoot\";\nvar UserActionBarEdit = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { userMessage: { edit: { tooltip = \"Edit\" } = {} } = {} } = {} } = useThreadConfig();\n    const allowEdit = useAllowEdit();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(actionBar_exports.Edit, {\n        disabled: !allowEdit,\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(TooltipIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_PencilIcon_lucide_react__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {})\n        })\n    });\n});\nUserActionBarEdit.displayName = \"UserActionBarEdit\";\nvar exports8 = {\n    Root: UserActionBarRoot,\n    Edit: UserActionBarEdit\n};\nvar user_action_bar_default = Object.assign(UserActionBar, exports8);\n// src/ui/user-message-attachment.tsx\n\nvar UserMessageAttachmentRoot = withDefaults(\"div\", {\n    className: \"aui-user-message-attachment-root\"\n});\nUserMessageAttachmentRoot.displayName = \"UserMessageAttachmentRoot\";\nvar UserMessageAttachment = ()=>{\n    const { useAttachment } = useAttachmentContext();\n    const attachment = useAttachment((a)=>a.attachment);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(UserMessageAttachmentRoot, {\n        children: [\n            \".\",\n            attachment.name.split(\".\").pop()\n        ]\n    });\n};\nUserMessageAttachment.displayName = \"UserMessageAttachment\";\nvar exports9 = {\n    Root: UserMessageAttachmentRoot\n};\nvar user_message_attachment_default = Object.assign(UserMessageAttachment, exports9);\n// src/ui/user-message.tsx\n\nvar UserMessage = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(UserMessageRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserMessageAttachments, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(user_action_bar_default, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserMessageContent, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(branch_picker_default, {})\n        ]\n    });\n};\nUserMessage.displayName = \"UserMessage\";\nvar UserMessageRoot = withDefaults(message_exports.Root, {\n    className: \"aui-user-message-root\"\n});\nUserMessageRoot.displayName = \"UserMessageRoot\";\nvar UserMessageContentWrapper = withDefaults(\"div\", {\n    className: \"aui-user-message-content\"\n});\nvar UserMessageContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components, ...props }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserMessageContentWrapper, {\n        ...props,\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.Content, {\n            components: {\n                ...components,\n                Text: components?.Text ?? content_part_default.Text\n            }\n        })\n    });\n});\nUserMessageContent.displayName = \"UserMessageContent\";\nvar UserMessageAttachmentsContainer = withDefaults(\"div\", {\n    className: \"aui-user-message-attachments\"\n});\nvar UserMessageAttachments = ({ components })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.If, {\n        hasAttachments: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(UserMessageAttachmentsContainer, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(message_exports.Attachments, {\n                components: {\n                    ...components,\n                    Attachment: components?.Attachment ?? user_message_attachment_default\n                }\n            })\n        })\n    });\n};\nvar exports10 = {\n    Root: UserMessageRoot,\n    Content: UserMessageContent,\n    Attachments: UserMessageAttachments\n};\nvar user_message_default = Object.assign(UserMessage, exports10);\n// src/ui/edit-composer.tsx\n\n\nvar EditComposer = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(EditComposerRoot, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(EditComposerInput, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(EditComposerFooter, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(EditComposerCancel, {}),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(EditComposerSend, {})\n                ]\n            })\n        ]\n    });\n};\nEditComposer.displayName = \"EditComposer\";\nvar EditComposerRoot = withDefaults(composer_exports.Root, {\n    className: \"aui-edit-composer-root\"\n});\nEditComposerRoot.displayName = \"EditComposerRoot\";\nvar EditComposerInput = withDefaults(composer_exports.Input, {\n    className: \"aui-edit-composer-input\"\n});\nEditComposerInput.displayName = \"EditComposerInput\";\nvar EditComposerFooter = withDefaults(\"div\", {\n    className: \"aui-edit-composer-footer\"\n});\nEditComposerFooter.displayName = \"EditComposerFooter\";\nvar EditComposerCancel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { editComposer: { cancel: { label = \"Cancel\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_exports.Cancel, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Button, {\n            variant: \"ghost\",\n            ...props,\n            ref,\n            children: props.children ?? label\n        })\n    });\n});\nEditComposerCancel.displayName = \"EditComposerCancel\";\nvar EditComposerSend = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { editComposer: { send: { label = \"Send\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_exports.Send, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Button, {\n            ...props,\n            ref,\n            children: props.children ?? label\n        })\n    });\n});\nEditComposerSend.displayName = \"EditComposerSend\";\nvar exports11 = {\n    Root: EditComposerRoot,\n    Input: EditComposerInput,\n    Footer: EditComposerFooter,\n    Cancel: EditComposerCancel,\n    Send: EditComposerSend\n};\nvar edit_composer_default = Object.assign(EditComposer, exports11);\n// src/ui/thread.tsx\n\nvar Thread = (config)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadRoot, {\n        config,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ThreadViewport, {\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_welcome_default, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadMessages, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(ThreadViewportFooter, {\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadScrollToBottom, {}),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(composer_default, {})\n                    ]\n                })\n            ]\n        })\n    });\n};\nvar ThreadRootStyled = withDefaults(thread_exports.Root, {\n    className: \"aui-root aui-thread-root\"\n});\nvar ThreadRoot = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ config, ...props }, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadConfigProvider, {\n        config,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadRootStyled, {\n            ...props,\n            ref\n        })\n    });\n});\nThreadRoot.displayName = \"ThreadRoot\";\nvar ThreadViewport = withDefaults(thread_exports.Viewport, {\n    className: \"aui-thread-viewport\"\n});\nThreadViewport.displayName = \"ThreadViewport\";\nvar ThreadViewportFooter = withDefaults(\"div\", {\n    className: \"aui-thread-viewport-footer\"\n});\nThreadViewportFooter.displayName = \"ThreadViewportFooter\";\nvar SystemMessage = ()=>null;\nvar ThreadMessages = ({ components, ...rest })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_exports.Messages, {\n        components: {\n            UserMessage: components?.UserMessage ?? user_message_default,\n            EditComposer: components?.EditComposer ?? edit_composer_default,\n            AssistantMessage: components?.AssistantMessage ?? assistant_message_default,\n            SystemMessage: components?.SystemMessage ?? SystemMessage\n        },\n        ...rest\n    });\n};\nThreadMessages.displayName = \"ThreadMessages\";\nvar ThreadScrollToBottomIconButton = withDefaults(TooltipIconButton, {\n    variant: \"outline\",\n    className: \"aui-thread-scroll-to-bottom\"\n});\nvar ThreadScrollToBottom = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const { strings: { thread: { scrollToBottom: { tooltip = \"Scroll to bottom\" } = {} } = {} } = {} } = useThreadConfig();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_exports.ScrollToBottom, {\n        asChild: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadScrollToBottomIconButton, {\n            tooltip,\n            ...props,\n            ref,\n            children: props.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_ArrowDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {})\n        })\n    });\n});\nThreadScrollToBottom.displayName = \"ThreadScrollToBottom\";\nvar exports12 = {\n    Root: ThreadRoot,\n    Viewport: ThreadViewport,\n    Messages: ThreadMessages,\n    ScrollToBottom: ThreadScrollToBottom,\n    ViewportFooter: ThreadViewportFooter\n};\nvar thread_default = Object.assign(Thread, exports12);\n// src/ui/assistant-modal.tsx\n\nvar AssistantModal = (config)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(AssistantModalRoot, {\n        config,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantModalTrigger, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantModalContent, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(thread_default, {})\n            })\n        ]\n    });\n};\nAssistantModal.displayName = \"AssistantModal\";\nvar AssistantModalRoot = ({ config, ...props })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ThreadConfigProvider, {\n        config,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(assistantModal_exports.Root, {\n            ...props\n        })\n    });\n};\nAssistantModalRoot.displayName = \"AssistantModalRoot\";\nvar AssistantModalTrigger = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantModalAnchor, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(assistantModal_exports.Trigger, {\n            asChild: true,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(AssistantModalButton, {\n                ...props,\n                ref\n            })\n        })\n    });\n});\nAssistantModalTrigger.displayName = \"AssistantModalTrigger\";\nvar AssistantModalAnchor = withDefaults(assistantModal_exports.Anchor, {\n    className: \"aui-root aui-modal-anchor\"\n});\nAssistantModalAnchor.displayName = \"AssistantModalAnchor\";\nvar ModalButtonStyled = withDefaults(TooltipIconButton, {\n    variant: \"default\",\n    className: \"aui-modal-button\"\n});\nvar AssistantModalButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ \"data-state\": state, ...rest }, ref)=>{\n    const { strings: { assistantModal: { open: { button: { tooltip: openTooltip = \"Close Assistant\" } = {} } = {}, closed: { button: { tooltip: closedTooltip = \"Open Assistant\" } = {} } = {} } = {} } = {} } = useThreadConfig();\n    const tooltip = state === \"open\" ? openTooltip : closedTooltip;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ModalButtonStyled, {\n        side: \"left\",\n        tooltip,\n        \"data-state\": state,\n        ...rest,\n        ref,\n        children: rest.children ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment, {\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_30__[\"default\"], {\n                    \"data-state\": state,\n                    className: \"aui-modal-button-closed-icon\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_barrel_optimize_names_BotIcon_ChevronDownIcon_lucide_react__WEBPACK_IMPORTED_MODULE_31__[\"default\"], {\n                    \"data-state\": state,\n                    className: \"aui-modal-button-open-icon\"\n                })\n            ]\n        })\n    });\n});\nAssistantModalButton.displayName = \"AssistantModalButton\";\nvar AssistantModalContent = withDefaults(assistantModal_exports.Content, {\n    className: \"aui-root aui-modal-content\",\n    sideOffset: 16\n});\nAssistantModalContent.displayName = \"AssistantModalContent\";\nvar exports13 = {\n    Root: AssistantModalRoot,\n    Trigger: AssistantModalTrigger,\n    Content: AssistantModalContent,\n    Button: AssistantModalButton,\n    Anchor: AssistantModalAnchor\n};\nvar assistant_modal_default = Object.assign(AssistantModal, exports13);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@assistant-ui+react@0.5.51_@types+react-dom@18.3.0_@types+react@18.3.5_react-dom@18.3.1_react_7uyi4neb6eo7mndhuosvbsxsle/node_modules/@assistant-ui/react/dist/index.mjs\n");

/***/ })

};
;